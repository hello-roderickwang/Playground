// DO NOT EDIT THIS FILE!!!
// it is created by mkcmds.tcl, see that script to recreate this  file.


// InMotion2 robot system software

// Copyright 2003-2013 Interactive Motion Technologies, Inc.
// Watertown, MA, USA
// http://www.interactive-motion.com
// All rights reserved


enum {
	so_u8 = 0,
	so_u16,
	so_u32,
	so_u64,
	so_s8,
	so_s16,
	so_s32,
	so_s64,
	so_f32,
	so_f64,
};


struct cmd_s {
	u32 type;
	s8 *name;
	void *loc;
	u32 size;
} cmds[] = {
	{so_f64, "shoulder_angle_cal", NULL,  1}, /* 0 */
	{so_u32, "shoulder_angle_channel", NULL,  1}, /* 1 */
	{so_f64, "shoulder_angle_degrees", NULL,  1}, /* 2 */
	{so_f64, "shoulder_angle_rad", NULL,  1}, /* 3 */
	{so_f64, "shoulder_angle_offset", NULL,  1}, /* 4 */
	{so_f64, "shoulder_angle_xform", NULL,  1}, /* 5 */
	{so_u32, "shoulder_torque_channel", NULL,  1}, /* 6 */
	{so_f64, "shoulder_torque_offset", NULL,  1}, /* 7 */
	{so_f64, "shoulder_torque_xform", NULL,  1}, /* 8 */
	{so_f64, "shoulder_vel_cal", NULL,  1}, /* 9 */
	{so_u32, "shoulder_vel_channel", NULL,  1}, /* 10 */
	{so_f64, "shoulder_vel_offset", NULL,  1}, /* 11 */
	{so_f64, "shoulder_vel_xform", NULL,  1}, /* 12 */
	{so_f64, "shoulder_vel_rad", NULL,  1}, /* 13 */
	{so_f64, "shoulder_tm_tmass_winding", NULL,  1}, /* 14 */
	{so_f64, "shoulder_tm_tmass_case", NULL,  1}, /* 15 */
	{so_f64, "shoulder_tm_tmpr_winding", NULL,  1}, /* 16 */
	{so_f64, "shoulder_tm_tmpr_case", NULL,  1}, /* 17 */
	{so_f64, "shoulder_tm_tres_winding", NULL,  1}, /* 18 */
	{so_f64, "shoulder_tm_tres_case", NULL,  1}, /* 19 */
	{so_f64, "shoulder_tm_alpha", NULL,  1}, /* 20 */
	{so_f64, "shoulder_tm_res0", NULL,  1}, /* 21 */
	{so_f64, "shoulder_tm_trans_cond", NULL,  1}, /* 22 */
	{so_f64, "shoulder_tm_reduction", NULL,  1}, /* 23 */
	{so_f64, "shoulder_tm_max_tmpr", NULL,  1}, /* 24 */
	{so_f64, "shoulder_tm_trange", NULL,  1}, /* 25 */
	{so_f64, "elbow_tm_tmass_winding", NULL,  1}, /* 26 */
	{so_f64, "elbow_tm_tmass_case", NULL,  1}, /* 27 */
	{so_f64, "elbow_tm_tmpr_winding", NULL,  1}, /* 28 */
	{so_f64, "elbow_tm_tmpr_case", NULL,  1}, /* 29 */
	{so_f64, "elbow_tm_tres_winding", NULL,  1}, /* 30 */
	{so_f64, "elbow_tm_tres_case", NULL,  1}, /* 31 */
	{so_f64, "elbow_tm_alpha", NULL,  1}, /* 32 */
	{so_f64, "elbow_tm_res0", NULL,  1}, /* 33 */
	{so_f64, "elbow_tm_trans_cond", NULL,  1}, /* 34 */
	{so_f64, "elbow_tm_reduction", NULL,  1}, /* 35 */
	{so_f64, "elbow_tm_max_tmpr", NULL,  1}, /* 36 */
	{so_f64, "elbow_tm_trange", NULL,  1}, /* 37 */
	{so_f64, "elbow_angle_cal", NULL,  1}, /* 38 */
	{so_u32, "elbow_angle_channel", NULL,  1}, /* 39 */
	{so_f64, "elbow_angle_degrees", NULL,  1}, /* 40 */
	{so_f64, "elbow_angle_rad", NULL,  1}, /* 41 */
	{so_f64, "elbow_angle_offset", NULL,  1}, /* 42 */
	{so_f64, "elbow_angle_xform", NULL,  1}, /* 43 */
	{so_u32, "elbow_torque_channel", NULL,  1}, /* 44 */
	{so_f64, "elbow_torque_offset", NULL,  1}, /* 45 */
	{so_f64, "elbow_torque_xform", NULL,  1}, /* 46 */
	{so_f64, "elbow_vel_cal", NULL,  1}, /* 47 */
	{so_u32, "elbow_vel_channel", NULL,  1}, /* 48 */
	{so_f64, "elbow_vel_offset", NULL,  1}, /* 49 */
	{so_f64, "elbow_vel_xform", NULL,  1}, /* 50 */
	{so_f64, "elbow_vel_rad", NULL,  1}, /* 51 */
	{so_f64, "wrist_diff_stiff", NULL,  1}, /* 52 */
	{so_f64, "wrist_diff_damp", NULL,  1}, /* 53 */
	{so_f64, "wrist_diff_side_stiff", NULL,  1}, /* 54 */
	{so_f64, "wrist_ps_stiff", NULL,  1}, /* 55 */
	{so_f64, "wrist_ps_damp", NULL,  1}, /* 56 */
	{so_f64, "wrist_diff_gcomp", NULL,  1}, /* 57 */
	{so_f64, "wrist_ps_gcomp", NULL,  1}, /* 58 */
	{so_f64, "wrist_rl_pfomax", NULL,  1}, /* 59 */
	{so_f64, "wrist_rl_pfotest", NULL,  1}, /* 60 */
	{so_u32, "wrist_nocenter3d", NULL,  1}, /* 61 */
	{so_u32, "wrist_ps_adap_going_up", NULL,  1}, /* 62 */
	{so_f64, "wrist_velmag", NULL,  1}, /* 63 */
	{so_f64, "wrist_accelmag", NULL,  1}, /* 64 */
	{so_f64, "wrist_jerkmag", NULL,  1}, /* 65 */
	{so_u32, "wrist_ft_motor_force", NULL,  1}, /* 66 */
	{so_u32, "wrist_left_enc_channel", NULL,  1}, /* 67 */
	{so_f64, "wrist_left_disp", NULL,  1}, /* 68 */
	{so_f64, "wrist_left_theta", NULL,  1}, /* 69 */
	{so_f64, "wrist_left_torque", NULL,  1}, /* 70 */
	{so_f64, "wrist_left_devtrq", NULL,  1}, /* 71 */
	{so_f64, "wrist_left_xform", NULL,  1}, /* 72 */
	{so_f64, "wrist_left_enc_xform", NULL,  1}, /* 73 */
	{so_f64, "wrist_left_bias", NULL,  1}, /* 74 */
	{so_f64, "wrist_left_volts", NULL,  1}, /* 75 */
	{so_f64, "wrist_left_test_volts", NULL,  1}, /* 76 */
	{so_u32, "wrist_left_ao_channel", NULL,  1}, /* 77 */
	{so_u32, "wrist_right_enc_channel", NULL,  1}, /* 78 */
	{so_f64, "wrist_right_disp", NULL,  1}, /* 79 */
	{so_f64, "wrist_right_theta", NULL,  1}, /* 80 */
	{so_f64, "wrist_right_torque", NULL,  1}, /* 81 */
	{so_f64, "wrist_right_devtrq", NULL,  1}, /* 82 */
	{so_f64, "wrist_right_xform", NULL,  1}, /* 83 */
	{so_f64, "wrist_right_enc_xform", NULL,  1}, /* 84 */
	{so_f64, "wrist_right_bias", NULL,  1}, /* 85 */
	{so_f64, "wrist_right_volts", NULL,  1}, /* 86 */
	{so_f64, "wrist_right_test_volts", NULL,  1}, /* 87 */
	{so_u32, "wrist_right_ao_channel", NULL,  1}, /* 88 */
	{so_u32, "wrist_ps_enc_channel", NULL,  1}, /* 89 */
	{so_f64, "wrist_ps_disp", NULL,  1}, /* 90 */
	{so_f64, "wrist_ps_theta", NULL,  1}, /* 91 */
	{so_f64, "wrist_ps_torque", NULL,  1}, /* 92 */
	{so_f64, "wrist_ps_devtrq", NULL,  1}, /* 93 */
	{so_f64, "wrist_ps_xform", NULL,  1}, /* 94 */
	{so_f64, "wrist_ps_enc_xform", NULL,  1}, /* 95 */
	{so_f64, "wrist_ps_bias", NULL,  1}, /* 96 */
	{so_f64, "wrist_ps_volts", NULL,  1}, /* 97 */
	{so_f64, "wrist_ps_test_volts", NULL,  1}, /* 98 */
	{so_u32, "wrist_ps_ao_channel", NULL,  1}, /* 99 */
	{so_f64, "wrist_diff_gear_ratio", NULL,  1}, /* 100 */
	{so_f64, "wrist_ps_gear_ratio", NULL,  1}, /* 101 */
	{so_u32, "wrist_uei_ao_board_handle", NULL,  1}, /* 102 */
	{so_u32, "have_wrist", NULL,  1}, /* 103 */
	{so_f64, "wrist_fe_pos", NULL,  1}, /* 104 */
	{so_f64, "wrist_aa_pos", NULL,  1}, /* 105 */
	{so_f64, "wrist_ps_pos", NULL,  1}, /* 106 */
	{so_f64, "wrist_fe_vel", NULL,  1}, /* 107 */
	{so_f64, "wrist_aa_vel", NULL,  1}, /* 108 */
	{so_f64, "wrist_ps_vel", NULL,  1}, /* 109 */
	{so_f64, "wrist_fe_fvel", NULL,  1}, /* 110 */
	{so_f64, "wrist_aa_fvel", NULL,  1}, /* 111 */
	{so_f64, "wrist_ps_fvel", NULL,  1}, /* 112 */
	{so_f64, "wrist_fe_ctltrq", NULL,  1}, /* 113 */
	{so_f64, "wrist_aa_ctltrq", NULL,  1}, /* 114 */
	{so_f64, "wrist_ps_ctltrq", NULL,  1}, /* 115 */
	{so_f64, "wrist_fe_offset", NULL,  1}, /* 116 */
	{so_f64, "wrist_aa_offset", NULL,  1}, /* 117 */
	{so_f64, "wrist_ps_offset", NULL,  1}, /* 118 */
	{so_f64, "wrist_fe_moment_cmd", NULL,  1}, /* 119 */
	{so_f64, "wrist_aa_moment_cmd", NULL,  1}, /* 120 */
	{so_f64, "wrist_ps_moment_cmd", NULL,  1}, /* 121 */
	{so_f64, "wrist_fe_norm", NULL,  1}, /* 122 */
	{so_f64, "wrist_aa_norm", NULL,  1}, /* 123 */
	{so_f64, "wrist_ps_norm", NULL,  1}, /* 124 */
	{so_f64, "wrist_fe_back", NULL,  1}, /* 125 */
	{so_f64, "wrist_aa_back", NULL,  1}, /* 126 */
	{so_f64, "wrist_ps_back", NULL,  1}, /* 127 */
	{so_f64, "ankle_stiff", NULL,  1}, /* 128 */
	{so_f64, "ankle_damp", NULL,  1}, /* 129 */
	{so_u32, "ankle_ueimf", NULL,  1}, /* 130 */
	{so_f64, "ankle_rl_pfomax", NULL,  1}, /* 131 */
	{so_f64, "ankle_rl_pfotest", NULL,  1}, /* 132 */
	{so_u32, "ankle_left_enc_channel", NULL,  1}, /* 133 */
	{so_f64, "ankle_left_disp", NULL,  1}, /* 134 */
	{so_f64, "ankle_left_devtrq", NULL,  1}, /* 135 */
	{so_f64, "ankle_left_xform", NULL,  1}, /* 136 */
	{so_f64, "ankle_left_volts", NULL,  1}, /* 137 */
	{so_f64, "ankle_left_force", NULL,  1}, /* 138 */
	{so_f64, "ankle_left_test_volts", NULL,  1}, /* 139 */
	{so_u32, "ankle_left_ao_channel", NULL,  1}, /* 140 */
	{so_u32, "ankle_left_rot_enc_channel", NULL,  1}, /* 141 */
	{so_f64, "ankle_left_rot_disp", NULL,  1}, /* 142 */
	{so_f64, "ankle_left_rot_lin_disp", NULL,  1}, /* 143 */
	{so_f64, "ankle_left_vel", NULL,  1}, /* 144 */
	{so_f64, "ankle_left_rot_lin_vel", NULL,  1}, /* 145 */
	{so_u32, "ankle_right_enc_channel", NULL,  1}, /* 146 */
	{so_f64, "ankle_right_disp", NULL,  1}, /* 147 */
	{so_f64, "ankle_right_devtrq", NULL,  1}, /* 148 */
	{so_f64, "ankle_right_xform", NULL,  1}, /* 149 */
	{so_f64, "ankle_right_volts", NULL,  1}, /* 150 */
	{so_f64, "ankle_right_force", NULL,  1}, /* 151 */
	{so_f64, "ankle_right_test_volts", NULL,  1}, /* 152 */
	{so_u32, "ankle_right_ao_channel", NULL,  1}, /* 153 */
	{so_u32, "ankle_right_rot_enc_channel", NULL,  1}, /* 154 */
	{so_f64, "ankle_right_rot_disp", NULL,  1}, /* 155 */
	{so_f64, "ankle_right_rot_lin_disp", NULL,  1}, /* 156 */
	{so_f64, "ankle_right_vel", NULL,  1}, /* 157 */
	{so_f64, "ankle_right_rot_lin_vel", NULL,  1}, /* 158 */
	{so_u32, "have_ankle", NULL,  1}, /* 159 */
	{so_f64, "ankle_dp_pos", NULL,  1}, /* 160 */
	{so_f64, "ankle_dp_vel", NULL,  1}, /* 161 */
	{so_f64, "ankle_dp_fvel", NULL,  1}, /* 162 */
	{so_f64, "ankle_dp_accel", NULL,  1}, /* 163 */
	{so_f64, "ankle_dp_torque", NULL,  1}, /* 164 */
	{so_f64, "ankle_dp_moment_cmd", NULL,  1}, /* 165 */
	{so_f64, "ankle_dp_offset", NULL,  1}, /* 166 */
	{so_f64, "ankle_dp_norm", NULL,  1}, /* 167 */
	{so_f64, "ankle_dp_back", NULL,  1}, /* 168 */
	{so_f64, "ankle_ie_pos", NULL,  1}, /* 169 */
	{so_f64, "ankle_ie_vel", NULL,  1}, /* 170 */
	{so_f64, "ankle_ie_fvel", NULL,  1}, /* 171 */
	{so_f64, "ankle_ie_accel", NULL,  1}, /* 172 */
	{so_f64, "ankle_ie_torque", NULL,  1}, /* 173 */
	{so_f64, "ankle_ie_moment_cmd", NULL,  1}, /* 174 */
	{so_f64, "ankle_ie_offset", NULL,  1}, /* 175 */
	{so_f64, "ankle_ie_norm", NULL,  1}, /* 176 */
	{so_f64, "ankle_ie_back", NULL,  1}, /* 177 */
	{so_f64, "ankle_accel_mag", NULL,  1}, /* 178 */
	{so_f64, "ankle_vel_mag", NULL,  1}, /* 179 */
	{so_f64, "ankle_safety_vel", NULL,  1}, /* 180 */
	{so_f64, "ankle_safety_accel", NULL,  1}, /* 181 */
	{so_f64, "ankle_trans_ratio", NULL,  1}, /* 182 */
	{so_f64, "ankle_trans_lead", NULL,  1}, /* 183 */
	{so_f64, "ankle_ankle_ball_length", NULL,  1}, /* 184 */
	{so_f64, "ankle_ball_ball_width", NULL,  1}, /* 185 */
	{so_f64, "ankle_av_actuator_length", NULL,  1}, /* 186 */
	{so_f64, "ankle_av_shin_length", NULL,  1}, /* 187 */
	{so_f64, "ankle_enc_xform", NULL,  1}, /* 188 */
	{so_f64, "ankle_slip_thresh", NULL,  1}, /* 189 */
	{so_u32, "ankle_uei_ao_board_handle", NULL,  1}, /* 190 */
	{so_u32, "ankle_knee_channel", NULL,  1}, /* 191 */
	{so_f64, "ankle_knee_raw", NULL,  1}, /* 192 */
	{so_f64, "ankle_knee_xform1", NULL,  1}, /* 193 */
	{so_f64, "ankle_knee_xform2", NULL,  1}, /* 194 */
	{so_f64, "ankle_knee_bias", NULL,  1}, /* 195 */
	{so_f64, "ankle_knee_gain", NULL,  1}, /* 196 */
	{so_f64, "ankle_knee_angle", NULL,  1}, /* 197 */
	{so_f64, "linear_stiff", NULL,  1}, /* 198 */
	{so_f64, "linear_damp", NULL,  1}, /* 199 */
	{so_f64, "linear_pfomax", NULL,  1}, /* 200 */
	{so_f64, "linear_pfotest", NULL,  1}, /* 201 */
	{so_u32, "linear_adap_going_up", NULL,  1}, /* 202 */
	{so_u32, "linear_enc_channel", NULL,  1}, /* 203 */
	{so_f64, "linear_disp", NULL,  1}, /* 204 */
	{so_f64, "linear_devfrc", NULL,  1}, /* 205 */
	{so_f64, "linear_xform", NULL,  1}, /* 206 */
	{so_f64, "linear_volts", NULL,  1}, /* 207 */
	{so_f64, "linear_test_volts", NULL,  1}, /* 208 */
	{so_u32, "linear_ao_channel", NULL,  1}, /* 209 */
	{so_f64, "linear_limit_volts", NULL,  1}, /* 210 */
	{so_u32, "linear_limit_channel", NULL,  1}, /* 211 */
	{so_u32, "have_linear", NULL,  1}, /* 212 */
	{so_f64, "linear_pos", NULL,  1}, /* 213 */
	{so_f64, "linear_vel", NULL,  1}, /* 214 */
	{so_f64, "linear_fvel", NULL,  1}, /* 215 */
	{so_f64, "linear_force", NULL,  1}, /* 216 */
	{so_f64, "linear_force_bias", NULL,  1}, /* 217 */
	{so_f64, "linear_offset", NULL,  1}, /* 218 */
	{so_f64, "linear_ref_pos", NULL,  1}, /* 219 */
	{so_f64, "linear_back", NULL,  1}, /* 220 */
	{so_f64, "linear_norm", NULL,  1}, /* 221 */
	{so_f64, "linear_gear_ratio", NULL,  1}, /* 222 */
	{so_u32, "linear_uei_ao_board_handle", NULL,  1}, /* 223 */
	{so_f64, "hand_stiff", NULL,  1}, /* 224 */
	{so_f64, "hand_damp", NULL,  1}, /* 225 */
	{so_f64, "hand_pfomax", NULL,  1}, /* 226 */
	{so_f64, "hand_pfotest", NULL,  1}, /* 227 */
	{so_u32, "hand_adap_going_up", NULL,  1}, /* 228 */
	{so_u32, "hand_enc_channel", NULL,  1}, /* 229 */
	{so_f64, "hand_disp", NULL,  1}, /* 230 */
	{so_f64, "hand_devfrc", NULL,  1}, /* 231 */
	{so_f64, "hand_xform", NULL,  1}, /* 232 */
	{so_f64, "hand_bias", NULL,  1}, /* 233 */
	{so_f64, "hand_volts", NULL,  1}, /* 234 */
	{so_f64, "hand_test_volts", NULL,  1}, /* 235 */
	{so_u32, "hand_ao_channel", NULL,  1}, /* 236 */
	{so_f64, "hand_limit_volts", NULL,  1}, /* 237 */
	{so_u32, "hand_limit_channel", NULL,  1}, /* 238 */
	{so_u32, "have_hand", NULL,  1}, /* 239 */
	{so_f64, "hand_pos", NULL,  1}, /* 240 */
	{so_f64, "hand_vel", NULL,  1}, /* 241 */
	{so_f64, "hand_fvel", NULL,  1}, /* 242 */
	{so_f64, "hand_force", NULL,  1}, /* 243 */
	{so_f64, "hand_grasp", NULL,  1}, /* 244 */
	{so_f64, "hand_force_bias", NULL,  1}, /* 245 */
	{so_f64, "hand_ref_pos", NULL,  1}, /* 246 */
	{so_f64, "hand_gear_ratio", NULL,  1}, /* 247 */
	{so_f64, "hand_gear_xform", NULL,  1}, /* 248 */
	{so_f64, "hand_gear_disp_xform", NULL,  1}, /* 249 */
	{so_f64, "hand_gear_offset", NULL,  1}, /* 250 */
	{so_f64, "hand_gear_span", NULL,  1}, /* 251 */
	{so_f64, "hand_gear_gap", NULL,  1}, /* 252 */
	{so_u32, "hand_uei_ao_board_handle", NULL,  1}, /* 253 */
	{so_f64, "hand_active_power", NULL,  1}, /* 254 */
	{so_u32, "hand_npoints", NULL,  1}, /* 255 */
	{so_f64, "ain_bias_comp", NULL,  4}, /* 256 */
	{so_u32, "ain_cfg", NULL,  1}, /* 257 */
	{so_u32, "ain_slowbit", NULL,  1}, /* 258 */
	{so_s32, "ain_got_samples", NULL,  1}, /* 259 */
	{so_s32, "ain_ret", NULL,  1}, /* 260 */
	{so_s32, "n_ueidaq_boards", NULL,  1}, /* 261 */
	{so_s32, "uei_board", NULL,  4}, /* 262 */
	{so_u32, "busy", NULL,  1}, /* 263 */
	{so_f64, "curl", NULL,  1}, /* 264 */
	{so_f64, "damp", NULL,  1}, /* 265 */
	{so_f64, "const_force_x", NULL,  1}, /* 266 */
	{so_f64, "const_force_y", NULL,  1}, /* 267 */
	{so_u32, "quit", NULL,  1}, /* 268 */
	{so_u32, "doinit", NULL,  1}, /* 269 */
	{so_u32, "didinit", NULL,  1}, /* 270 */
	{so_u32, "butcutoff", NULL,  1}, /* 271 */
	{so_s32, "ddfifo", NULL,  1}, /* 272 */
	{so_s32, "cififo", NULL,  1}, /* 273 */
	{so_s32, "dififo", NULL,  1}, /* 274 */
	{so_s32, "dofifo", NULL,  1}, /* 275 */
	{so_s32, "eofifo", NULL,  1}, /* 276 */
	{so_u32, "fifolen", NULL,  1}, /* 277 */
	{so_s32, "tcfifo", NULL,  1}, /* 278 */
	{so_s32, "ftfifo", NULL,  1}, /* 279 */
	{so_u32, "ntickfifo", NULL,  1}, /* 280 */
	{so_u32, "fttickfifo", NULL,  1}, /* 281 */
	{so_f64, "s_torque", NULL,  1}, /* 282 */
	{so_f64, "e_torque", NULL,  1}, /* 283 */
	{so_f64, "s_volts", NULL,  1}, /* 284 */
	{so_f64, "e_volts", NULL,  1}, /* 285 */
	{so_f64, "link_s", NULL,  1}, /* 286 */
	{so_f64, "link_e", NULL,  1}, /* 287 */
	{so_u32, "have_planar", NULL,  1}, /* 288 */
	{so_u32, "have_uei", NULL,  1}, /* 289 */
	{so_u32, "have_tach", NULL,  1}, /* 290 */
	{so_u32, "have_ft", NULL,  1}, /* 291 */
	{so_u32, "have_grasp", NULL,  1}, /* 292 */
	{so_u32, "have_accel", NULL,  1}, /* 293 */
	{so_u32, "have_planar_incenc", NULL,  1}, /* 294 */
	{so_u32, "have_planar_ao8", NULL,  1}, /* 295 */
	{so_u32, "have_mf_aout_for_dout", NULL,  1}, /* 296 */
	{so_u32, "ankle_debug_position", NULL,  1}, /* 297 */
	{so_u32, "have_thermal_model", NULL,  1}, /* 298 */
	{so_u32, "Hz", NULL,  1}, /* 299 */
	{so_u32, "i", NULL,  1}, /* 300 */
	{so_u32, "fasti", NULL,  1}, /* 301 */
	{so_u32, "fastHz", NULL,  1}, /* 302 */
	{so_u32, "fastirate", NULL,  1}, /* 303 */
	{so_f64, "fastrate", NULL,  1}, /* 304 */
	{so_u32, "ovsample", NULL,  1}, /* 305 */
	{so_u32, "irate", NULL,  1}, /* 306 */
	{so_f64, "disp", NULL,  32}, /* 307 */
	{so_u32, "ndisp", NULL,  1}, /* 308 */
	{so_f64, "log", NULL,  32}, /* 309 */
	{so_u32, "nlog", NULL,  1}, /* 310 */
	{so_u32, "logfnid", NULL,  1}, /* 311 */
	{so_f64, "refin", NULL,  32}, /* 312 */
	{so_u32, "nwref", NULL,  1}, /* 313 */
	{so_u32, "nrref", NULL,  1}, /* 314 */
	{so_u32, "reffnid", NULL,  1}, /* 315 */
	{so_u32, "refri", NULL,  1}, /* 316 */
	{so_u32, "refwi", NULL,  1}, /* 317 */
	{so_u32, "refterm", NULL,  1}, /* 318 */
	{so_u32, "ref_switchback_go", NULL,  1}, /* 319 */
	{so_f64, "offset_x", NULL,  1}, /* 320 */
	{so_f64, "offset_y", NULL,  1}, /* 321 */
	{so_u32, "paused", NULL,  1}, /* 322 */
	{so_u32, "fault", NULL,  1}, /* 323 */
	{so_s32, "stiffener", NULL,  1}, /* 324 */
	{so_s32, "stiff_delta", NULL,  1}, /* 325 */
	{so_u32, "no_motors", NULL,  1}, /* 326 */
	{so_f64, "pi", NULL,  1}, /* 327 */
	{so_f64, "pfomax", NULL,  1}, /* 328 */
	{so_f64, "pfotest", NULL,  1}, /* 329 */
	{so_f64, "impulse_thresh_volts", NULL,  1}, /* 330 */
	{so_f64, "s_dvolts", NULL,  1}, /* 331 */
	{so_f64, "e_dvolts", NULL,  1}, /* 332 */
	{so_f64, "rate", NULL,  1}, /* 333 */
	{so_f64, "restart_damp", NULL,  1}, /* 334 */
	{so_u32, "restart_go", NULL,  1}, /* 335 */
	{so_u32, "restart_Hz", NULL,  1}, /* 336 */
	{so_u32, "restart_ovsample", NULL,  1}, /* 337 */
	{so_f64, "restart_stiff", NULL,  1}, /* 338 */
	{so_u32, "no_safety_check", NULL,  1}, /* 339 */
	{so_f64, "safety_damping_nms", NULL,  1}, /* 340 */
	{so_f64, "safety_pos", NULL,  1}, /* 341 */
	{so_f64, "safety_torque", NULL,  1}, /* 342 */
	{so_f64, "safety_ramp", NULL,  1}, /* 343 */
	{so_f64, "safety_vel", NULL,  1}, /* 344 */
	{so_u32, "safety_planar_just_crossed_back", NULL,  1}, /* 345 */
	{so_u32, "safety_was_planar_damping", NULL,  1}, /* 346 */
	{so_u32, "safety_damp_ret_ticks", NULL,  1}, /* 347 */
	{so_f64, "safety_damp_ret_secs", NULL,  1}, /* 348 */
	{so_u32, "samplenum", NULL,  1}, /* 349 */
	{so_u32, "vibrate", NULL,  1}, /* 350 */
	{so_s32, "xvibe", NULL,  1}, /* 351 */
	{so_s32, "yvibe", NULL,  1}, /* 352 */
	{so_f64, "tsvibe", NULL,  1}, /* 353 */
	{so_f64, "tevibe", NULL,  1}, /* 354 */
	{so_f64, "tvibamp", NULL,  1}, /* 355 */
	{so_u32, "test_raw_torque", NULL,  1}, /* 356 */
	{so_f64, "raw_torque_volts_s", NULL,  1}, /* 357 */
	{so_f64, "raw_torque_volts_e", NULL,  1}, /* 358 */
	{so_u32, "test_no_torque", NULL,  1}, /* 359 */
	{so_f64, "sin_amplitude", NULL,  1}, /* 360 */
	{so_f64, "sin_period", NULL,  1}, /* 361 */
	{so_u32, "sin_which_motor", NULL,  1}, /* 362 */
	{so_u32, "sim_sensors", NULL,  1}, /* 363 */
	{so_f64, "sim_pos_x", NULL,  1}, /* 364 */
	{so_f64, "sim_pos_y", NULL,  1}, /* 365 */
	{so_f64, "sim_wr_pos_fe", NULL,  1}, /* 366 */
	{so_f64, "sim_wr_pos_ps", NULL,  1}, /* 367 */
	{so_f64, "sim_wr_pos_aa", NULL,  1}, /* 368 */
	{so_f64, "sim_vel_x", NULL,  1}, /* 369 */
	{so_f64, "sim_vel_y", NULL,  1}, /* 370 */
	{so_f64, "sim_wr_vel_fe", NULL,  1}, /* 371 */
	{so_f64, "sim_wr_vel_ps", NULL,  1}, /* 372 */
	{so_f64, "sim_wr_vel_aa", NULL,  1}, /* 373 */
	{so_f64, "pl_req_pos_x", NULL,  1}, /* 374 */
	{so_f64, "pl_req_pos_y", NULL,  1}, /* 375 */
	{so_u32, "pos_error_mod", NULL,  1}, /* 376 */
	{so_f64, "pos_error_dx", NULL,  1}, /* 377 */
	{so_f64, "pos_error_dy", NULL,  1}, /* 378 */
	{so_u32, "slot_id", NULL,  1}, /* 379 */
	{so_u32, "slot_i", NULL,  1}, /* 380 */
	{so_u32, "slot_incr", NULL,  1}, /* 381 */
	{so_u32, "slot_term", NULL,  1}, /* 382 */
	{so_u32, "slot_termi", NULL,  1}, /* 383 */
	{so_f64, "slot_b0_x", NULL,  1}, /* 384 */
	{so_f64, "slot_b0_y", NULL,  1}, /* 385 */
	{so_f64, "slot_b0_w", NULL,  1}, /* 386 */
	{so_f64, "slot_b0_h", NULL,  1}, /* 387 */
	{so_f64, "slot_b1_x", NULL,  1}, /* 388 */
	{so_f64, "slot_b1_y", NULL,  1}, /* 389 */
	{so_f64, "slot_b1_w", NULL,  1}, /* 390 */
	{so_f64, "slot_b1_h", NULL,  1}, /* 391 */
	{so_u32, "slot_fnid", NULL,  1}, /* 392 */
	{so_f64, "slot_rot", NULL,  1}, /* 393 */
	{so_u32, "slot_go", NULL,  1}, /* 394 */
	{so_u32, "slot_running", NULL,  1}, /* 395 */
	{so_u32, "slot_max", NULL,  1}, /* 396 */
	{so_u32, "slot0_id", NULL,  1}, /* 397 */
	{so_u32, "slot0_i", NULL,  1}, /* 398 */
	{so_u32, "slot0_incr", NULL,  1}, /* 399 */
	{so_u32, "slot0_term", NULL,  1}, /* 400 */
	{so_u32, "slot0_termi", NULL,  1}, /* 401 */
	{so_f64, "slot0_b0_x", NULL,  1}, /* 402 */
	{so_f64, "slot0_b0_y", NULL,  1}, /* 403 */
	{so_f64, "slot0_b0_w", NULL,  1}, /* 404 */
	{so_f64, "slot0_b0_h", NULL,  1}, /* 405 */
	{so_f64, "slot0_b1_x", NULL,  1}, /* 406 */
	{so_f64, "slot0_b1_y", NULL,  1}, /* 407 */
	{so_f64, "slot0_b1_w", NULL,  1}, /* 408 */
	{so_f64, "slot0_b1_h", NULL,  1}, /* 409 */
	{so_f64, "slot0_bcur_x", NULL,  1}, /* 410 */
	{so_f64, "slot0_bcur_y", NULL,  1}, /* 411 */
	{so_f64, "slot0_bcur_w", NULL,  1}, /* 412 */
	{so_f64, "slot0_bcur_h", NULL,  1}, /* 413 */
	{so_u32, "slot0_fnid", NULL,  1}, /* 414 */
	{so_f64, "slot0_rot", NULL,  1}, /* 415 */
	{so_u32, "slot0_running", NULL,  1}, /* 416 */
	{so_u32, "slot0_go", NULL,  1}, /* 417 */
	{so_f64, "slot1_b0_x", NULL,  1}, /* 418 */
	{so_f64, "slot1_b0_y", NULL,  1}, /* 419 */
	{so_f64, "slot1_b0_w", NULL,  1}, /* 420 */
	{so_f64, "slot1_b0_h", NULL,  1}, /* 421 */
	{so_f64, "pm_active_power", NULL,  1}, /* 422 */
	{so_f64, "pm_robot_power", NULL,  1}, /* 423 */
	{so_f64, "pm_min_jerk_deviation", NULL,  1}, /* 424 */
	{so_f64, "pm_min_jerk_dgraph", NULL,  1}, /* 425 */
	{so_f64, "pm_jerkmag", NULL,  1}, /* 426 */
	{so_f64, "pm_dist_straight_line", NULL,  1}, /* 427 */
	{so_f64, "pm_max_dist_along_axis", NULL,  1}, /* 428 */
	{so_f64, "pm_min_dist_from_target", NULL,  1}, /* 429 */
	{so_f64, "pm_max_vel", NULL,  1}, /* 430 */
	{so_u32, "pm_npoints", NULL,  1}, /* 431 */
	{so_u32, "pm_five_d", NULL,  1}, /* 432 */
	{so_u32, "done_npoints", NULL,  1}, /* 433 */
	{so_f64, "done_active_power", NULL,  1}, /* 434 */
	{so_f64, "done_robot_power", NULL,  1}, /* 435 */
	{so_f64, "done_min_jerk_deviation", NULL,  1}, /* 436 */
	{so_f64, "done_min_jerk_dgraph", NULL,  1}, /* 437 */
	{so_f64, "done_jerkmag", NULL,  1}, /* 438 */
	{so_f64, "done_max_vel", NULL,  1}, /* 439 */
	{so_f64, "done_dist_straight_line_sq", NULL,  1}, /* 440 */
	{so_f64, "done_max_dist_along_axis", NULL,  1}, /* 441 */
	{so_f64, "done_min_dist_from_target", NULL,  1}, /* 442 */
	{so_f64, "done_hand_pct_in", NULL,  1}, /* 443 */
	{so_f64, "done_hand_pct_out", NULL,  1}, /* 444 */
	{so_f64, "scr", NULL,  64}, /* 445 */
	{so_f64, "scr0", NULL,  1}, /* 446 */
	{so_f64, "scr1", NULL,  1}, /* 447 */
	{so_f64, "scr2", NULL,  1}, /* 448 */
	{so_f64, "scr3", NULL,  1}, /* 449 */
	{so_f64, "scr4", NULL,  1}, /* 450 */
	{so_f64, "scr5", NULL,  1}, /* 451 */
	{so_f64, "scr6", NULL,  1}, /* 452 */
	{so_f64, "scr7", NULL,  1}, /* 453 */
	{so_f64, "aodiff", NULL,  16}, /* 454 */
	{so_f64, "aocum", NULL,  16}, /* 455 */
	{so_f64, "aorms", NULL,  16}, /* 456 */
	{so_f64, "aocum1", NULL,  16}, /* 457 */
	{so_f64, "aoavg", NULL,  16}, /* 458 */
	{so_s32, "aocount", NULL,  1}, /* 459 */
	{so_f64, "pl_stopspan", NULL,  1}, /* 460 */
	{so_f64, "pl_linkspan", NULL,  1}, /* 461 */
	{so_f64, "pl_vbig", NULL,  1}, /* 462 */
	{so_f64, "pl_vsmall", NULL,  1}, /* 463 */
	{so_f64, "pl_vtiny", NULL,  1}, /* 464 */
	{so_f64, "pl_slop", NULL,  1}, /* 465 */
	{so_f64, "ha_vbig", NULL,  1}, /* 466 */
	{so_f64, "ha_vsmall", NULL,  1}, /* 467 */
	{so_f64, "ha_slop", NULL,  1}, /* 468 */
	{so_f64, "wr_diffslop", NULL,  1}, /* 469 */
	{so_f64, "wr_psslop", NULL,  1}, /* 470 */
	{so_f64, "wr_rspan", NULL,  1}, /* 471 */
	{so_f64, "wr_lspan", NULL,  1}, /* 472 */
	{so_f64, "wr_psspan", NULL,  1}, /* 473 */
	{so_f64, "wr_vbig", NULL,  1}, /* 474 */
	{so_f64, "wr_vsmall", NULL,  1}, /* 475 */
	{so_u16, "dienc", NULL,  4}, /* 476 */
	{so_s32, "dienc_vel", NULL,  2}, /* 477 */
	{so_s32, "dienc_accel", NULL,  2}, /* 478 */
	{so_u32, "diovs", NULL,  1}, /* 479 */
	{so_u16, "dout_buf", NULL,  4}, /* 480 */
	{so_u16, "dout0", NULL,  1}, /* 481 */
	{so_u16, "dout1", NULL,  1}, /* 482 */
	{so_u16, "dout_latch", NULL,  1}, /* 483 */
	{so_u16, "adc", NULL,  64}, /* 484 */
	{so_u16, "dac", NULL,  32}, /* 485 */
	{so_f64, "adcvolts", NULL,  64}, /* 486 */
	{so_f64, "adcmean", NULL,  64}, /* 487 */
	{so_f64, "adcmed", NULL,  64}, /* 488 */
	{so_f64, "dacvolts", NULL,  32}, /* 489 */
	{so_u16, "distat", NULL,  2}, /* 490 */
	{so_u32, "ft_flip", NULL,  1}, /* 491 */
	{so_u32, "ft_vert", NULL,  1}, /* 492 */
	{so_u32, "ft_have_rotmat", NULL,  1}, /* 493 */
	{so_u32, "ft_rotmat_setup_done", NULL,  1}, /* 494 */
	{so_f64, "ft_rotx", NULL,  1}, /* 495 */
	{so_f64, "ft_roty", NULL,  1}, /* 496 */
	{so_f64, "ft_rotz", NULL,  1}, /* 497 */
	{so_u32, "ft_righthand", NULL,  1}, /* 498 */
	{so_f64, "ft_pre_jacx", NULL,  1}, /* 499 */
	{so_f64, "ft_pre_jacy", NULL,  1}, /* 500 */
	{so_f64, "ft_pre_jacz", NULL,  1}, /* 501 */
	{so_f64, "ft_rotmat", NULL,  9}, /* 502 */
	{so_u32, "ft_dobias", NULL,  1}, /* 503 */
	{so_f64, "ft_offset", NULL,  1}, /* 504 */
	{so_u32, "ft_channel", NULL,  6}, /* 505 */
	{so_f64, "ft_raw", NULL,  6}, /* 506 */
	{so_f64, "ft_curr", NULL,  6}, /* 507 */
	{so_f64, "ft_prev", NULL,  6}, /* 508 */
	{so_f64, "ft_filt", NULL,  6}, /* 509 */
	{so_f64, "ft_sg", NULL,  6}, /* 510 */
	{so_f64, "ft_prevf", NULL,  6}, /* 511 */
	{so_f64, "ft_xworld", NULL,  1}, /* 512 */
	{so_f64, "ft_yworld", NULL,  1}, /* 513 */
	{so_f64, "ft_zworld", NULL,  1}, /* 514 */
	{so_f64, "ft_xdev", NULL,  1}, /* 515 */
	{so_f64, "ft_ydev", NULL,  1}, /* 516 */
	{so_f64, "ft_zdev", NULL,  1}, /* 517 */
	{so_f64, "ft_xmoment", NULL,  1}, /* 518 */
	{so_f64, "ft_ymoment", NULL,  1}, /* 519 */
	{so_f64, "ft_zmoment", NULL,  1}, /* 520 */
	{so_f64, "ft_xymag", NULL,  1}, /* 521 */
	{so_f64, "ft_cal", NULL,  36}, /* 522 */
	{so_f64, "ft_scale", NULL,  6}, /* 523 */
	{so_f64, "ft_bias", NULL,  6}, /* 524 */
	{so_f64, "ft_cooked", NULL,  6}, /* 525 */
	{so_f64, "ft_avg", NULL,  6}, /* 526 */
	{so_f64, "ft_sghist0", NULL,  16}, /* 527 */
	{so_u32, "ft_status", NULL,  1}, /* 528 */
	{so_f64, "ft_cal01", NULL,  1}, /* 529 */
	{so_f64, "ft_cal10", NULL,  1}, /* 530 */
	{so_f64, "ft_cal11", NULL,  1}, /* 531 */
	{so_u32, "accel_channel", NULL,  3}, /* 532 */
	{so_f64, "accel_raw", NULL,  3}, /* 533 */
	{so_f64, "accel_curr", NULL,  3}, /* 534 */
	{so_f64, "accel_bias", NULL,  3}, /* 535 */
	{so_f64, "accel_xform", NULL,  1}, /* 536 */
	{so_f64, "accelx", NULL,  1}, /* 537 */
	{so_f64, "accely", NULL,  1}, /* 538 */
	{so_f64, "accelz", NULL,  1}, /* 539 */
	{so_u32, "grasp_channel", NULL,  1}, /* 540 */
	{so_f64, "grasp_raw", NULL,  1}, /* 541 */
	{so_f64, "grasp_bias", NULL,  1}, /* 542 */
	{so_f64, "grasp_cal", NULL,  1}, /* 543 */
	{so_f64, "grasp_gain", NULL,  1}, /* 544 */
	{so_f64, "grasp_force", NULL,  1}, /* 545 */
	{so_u32, "have_can", NULL,  1}, /* 546 */
	{so_s32, "can_fd", NULL,  1}, /* 547 */
	{so_s32, "can_axis", NULL,  1}, /* 548 */
	{so_s32, "can_value", NULL,  8}, /* 549 */
	{so_s16, "can_analog1", NULL,  8}, /* 550 */
	{so_s16, "can_analog2", NULL,  8}, /* 551 */
	{so_s32, "can_pos_raw", NULL,  8}, /* 552 */
	{so_s32, "can_pos2_raw", NULL,  8}, /* 553 */
	{so_s32, "can_vel_raw", NULL,  8}, /* 554 */
	{so_s32, "can_read_error", NULL,  8}, /* 555 */
	{so_s32, "can_status", NULL,  8}, /* 556 */
	{so_u32, "can_bitmask", NULL,  1}, /* 557 */
	{so_s32, "can_recv_count", NULL,  1}, /* 558 */
	{so_u64, "can_pos_sync_time", NULL,  1}, /* 559 */
	{so_u64, "can_pos_time", NULL,  8}, /* 560 */
	{so_u64, "can_max_pos_time", NULL,  1}, /* 561 */
	{so_u64, "can_pos_wait_time", NULL,  8}, /* 562 */
	{so_s32, "can_setct", NULL,  8}, /* 563 */
	{so_u32, "naxes", NULL,  1}, /* 564 */
	{so_s32, "rshm_count", NULL,  1}, /* 565 */
	{so_s32, "wshm_count", NULL,  1}, /* 566 */
	{so_u32, "have_pci4e", NULL,  1}, /* 567 */
	{so_u32, "pci4e_bar", NULL,  1}, /* 568 */
	{so_u32, "pci4e_remap", NULL,  1}, /* 569 */
	{so_u32, "pci4e_len", NULL,  1}, /* 570 */
	{so_u32, "pci4e_dev", NULL,  1}, /* 571 */
	{so_f64, "pcienc", NULL,  4}, /* 572 */
	{so_f64, "pcienc_lin", NULL,  4}, /* 573 */
	{so_s32, "pcienc_raw", NULL,  4}, /* 574 */
	{so_u32, "pcienc_ret", NULL,  4}, /* 575 */
	{so_u32, "pcienc_nerrs", NULL,  4}, /* 576 */
	{so_u32, "pcienc_lastret", NULL,  4}, /* 577 */
	{so_u32, "pcienc_limit", NULL,  1}, /* 578 */
	{so_f64, "pcienc_scale", NULL,  1}, /* 579 */
	{so_u32, "pcienc_zero", NULL,  1}, /* 580 */
	{so_u32, "pcienc_dosetct", NULL,  1}, /* 581 */
	{so_u32, "pcienc_setct", NULL,  4}, /* 582 */
	{so_f64, "stiff", NULL,  1}, /* 583 */
	{so_f64, "side_stiff", NULL,  1}, /* 584 */
	{so_f64, "friction", NULL,  1}, /* 585 */
	{so_f64, "friction_gap", NULL,  1}, /* 586 */
	{so_u8, "tag", NULL,  8}, /* 587 */
	{so_u64, "time_after_last_sample", NULL,  1}, /* 588 */
	{so_u64, "time_after_sample", NULL,  1}, /* 589 */
	{so_u64, "time_at_start", NULL,  1}, /* 590 */
	{so_u64, "time_before_last_sample", NULL,  1}, /* 591 */
	{so_u64, "time_before_sample", NULL,  1}, /* 592 */
	{so_u64, "time_delta_call", NULL,  1}, /* 593 */
	{so_u64, "time_delta_sample", NULL,  1}, /* 594 */
	{so_u64, "time_delta_tick", NULL,  1}, /* 595 */
	{so_u64, "time_since_start", NULL,  1}, /* 596 */
	{so_u32, "time_ns_delta_call", NULL,  1}, /* 597 */
	{so_u32, "time_ns_delta_sample", NULL,  1}, /* 598 */
	{so_u32, "time_ns_delta_tick", NULL,  1}, /* 599 */
	{so_u32, "time_ms_since_start", NULL,  1}, /* 600 */
	{so_u32, "sec", NULL,  1}, /* 601 */
	{so_u32, "time_ns_delta_sample_thresh", NULL,  1}, /* 602 */
	{so_u32, "time_ns_delta_tick_thresh", NULL,  1}, /* 603 */
	{so_u32, "time_ns_max_delta_sample", NULL,  1}, /* 604 */
	{so_u32, "time_ns_max_delta_tick", NULL,  1}, /* 605 */
	{so_u32, "total_samples", NULL,  1}, /* 606 */
	{so_f64, "x", NULL,  1}, /* 607 */
	{so_f64, "y", NULL,  1}, /* 608 */
	{so_f64, "ref_pos_x", NULL,  1}, /* 609 */
	{so_f64, "ref_pos_y", NULL,  1}, /* 610 */
	{so_f64, "x_force", NULL,  1}, /* 611 */
	{so_f64, "y_force", NULL,  1}, /* 612 */
	{so_f64, "soft_xvel", NULL,  1}, /* 613 */
	{so_f64, "soft_yvel", NULL,  1}, /* 614 */
	{so_f64, "fsoft_xvel", NULL,  1}, /* 615 */
	{so_f64, "fsoft_yvel", NULL,  1}, /* 616 */
	{so_f64, "tach_xvel", NULL,  1}, /* 617 */
	{so_f64, "tach_yvel", NULL,  1}, /* 618 */
	{so_f64, "xvel", NULL,  1}, /* 619 */
	{so_f64, "yvel", NULL,  1}, /* 620 */
	{so_f64, "velmag", NULL,  1}, /* 621 */
	{so_f64, "soft_accelx", NULL,  1}, /* 622 */
	{so_f64, "soft_accely", NULL,  1}, /* 623 */
	{so_f64, "soft_accelmag", NULL,  1}, /* 624 */
	{so_f64, "soft_jerkx", NULL,  1}, /* 625 */
	{so_f64, "soft_jerky", NULL,  1}, /* 626 */
	{so_f64, "soft_jerkmag", NULL,  1}, /* 627 */
	{so_f64, "stheta", NULL,  1}, /* 628 */
	{so_f64, "etheta", NULL,  1}, /* 629 */
	{so_f64, "sthetadot", NULL,  1}, /* 630 */
	{so_f64, "ethetadot", NULL,  1}, /* 631 */
	{so_f64, "spring_ref_s", NULL,  1}, /* 632 */
	{so_f64, "spring_ref_e", NULL,  1}, /* 633 */
	{so_f64, "spring_stiff_s", NULL,  1}, /* 634 */
	{so_f64, "spring_stiff_e", NULL,  1}, /* 635 */
	{so_f64, "spring_disp_s", NULL,  1}, /* 636 */
	{so_f64, "spring_disp_e", NULL,  1}, /* 637 */
	{so_f64, "pl_back_x", NULL,  1}, /* 638 */
	{so_f64, "pl_back_y", NULL,  1}, /* 639 */
	{so_f64, "pl_norm_x", NULL,  1}, /* 640 */
	{so_f64, "pl_norm_y", NULL,  1}, /* 641 */
	{so_u32, "planar_uei_ao_board_handle", NULL,  1}, /* 642 */
	{so_u32, "errnum", NULL,  1}, /* 643 */
	{so_u32, "nerrors", NULL,  1}, /* 644 */
	{so_u32, "errori", NULL,  128}, /* 645 */
	{so_u32, "errorcode", NULL,  128}, /* 646 */
	{so_u32, "errorindex", NULL,  1}, /* 647 */
	{so_f64, "refarr", NULL,  50000}, /* 648 */
	{so_u32, "asciilog", NULL,  1}, /* 649 */
	{so_u32, "targetnumber", NULL,  1}, /* 650 */
	{so_u32, "last_shm_val", NULL,  1}, /* 651 */
};


void setcmdlocs(void) {
	cmds[0].loc = &rob->shoulder.angle.cal;
	cmds[1].loc = &rob->shoulder.angle.channel;
	cmds[2].loc = &rob->shoulder.angle.deg;
	cmds[3].loc = &rob->shoulder.angle.rad;
	cmds[4].loc = &rob->shoulder.angle.offset;
	cmds[5].loc = &rob->shoulder.angle.xform;
	cmds[6].loc = &rob->shoulder.torque.channel;
	cmds[7].loc = &rob->shoulder.torque.offset;
	cmds[8].loc = &rob->shoulder.torque.xform;
	cmds[9].loc = &rob->shoulder.vel.cal;
	cmds[10].loc = &rob->shoulder.vel.channel;
	cmds[11].loc = &rob->shoulder.vel.offset;
	cmds[12].loc = &rob->shoulder.vel.xform;
	cmds[13].loc = &rob->shoulder.vel.rad;
	cmds[14].loc = &rob->shoulder.tm.tmass_winding;
	cmds[15].loc = &rob->shoulder.tm.tmass_case;
	cmds[16].loc = &rob->shoulder.tm.tmpr_winding;
	cmds[17].loc = &rob->shoulder.tm.tmpr_case;
	cmds[18].loc = &rob->shoulder.tm.tres_winding;
	cmds[19].loc = &rob->shoulder.tm.tres_case;
	cmds[20].loc = &rob->shoulder.tm.alpha;
	cmds[21].loc = &rob->shoulder.tm.res0;
	cmds[22].loc = &rob->shoulder.tm.trans_cond;
	cmds[23].loc = &rob->shoulder.tm.reduction;
	cmds[24].loc = &rob->shoulder.tm.max_tmpr;
	cmds[25].loc = &rob->shoulder.tm.trange;
	cmds[26].loc = &rob->elbow.tm.tmass_winding;
	cmds[27].loc = &rob->elbow.tm.tmass_case;
	cmds[28].loc = &rob->elbow.tm.tmpr_winding;
	cmds[29].loc = &rob->elbow.tm.tmpr_case;
	cmds[30].loc = &rob->elbow.tm.tres_winding;
	cmds[31].loc = &rob->elbow.tm.tres_case;
	cmds[32].loc = &rob->elbow.tm.alpha;
	cmds[33].loc = &rob->elbow.tm.res0;
	cmds[34].loc = &rob->elbow.tm.trans_cond;
	cmds[35].loc = &rob->elbow.tm.reduction;
	cmds[36].loc = &rob->elbow.tm.max_tmpr;
	cmds[37].loc = &rob->elbow.tm.trange;
	cmds[38].loc = &rob->elbow.angle.cal;
	cmds[39].loc = &rob->elbow.angle.channel;
	cmds[40].loc = &rob->elbow.angle.deg;
	cmds[41].loc = &rob->elbow.angle.rad;
	cmds[42].loc = &rob->elbow.angle.offset;
	cmds[43].loc = &rob->elbow.angle.xform;
	cmds[44].loc = &rob->elbow.torque.channel;
	cmds[45].loc = &rob->elbow.torque.offset;
	cmds[46].loc = &rob->elbow.torque.xform;
	cmds[47].loc = &rob->elbow.vel.cal;
	cmds[48].loc = &rob->elbow.vel.channel;
	cmds[49].loc = &rob->elbow.vel.offset;
	cmds[50].loc = &rob->elbow.vel.xform;
	cmds[51].loc = &rob->elbow.vel.rad;
	cmds[52].loc = &ob->wrist.diff_stiff;
	cmds[53].loc = &ob->wrist.diff_damp;
	cmds[54].loc = &ob->wrist.diff_side_stiff;
	cmds[55].loc = &ob->wrist.ps_stiff;
	cmds[56].loc = &ob->wrist.ps_damp;
	cmds[57].loc = &ob->wrist.diff_gcomp;
	cmds[58].loc = &ob->wrist.ps_gcomp;
	cmds[59].loc = &ob->wrist.rl_pfomax;
	cmds[60].loc = &ob->wrist.rl_pfotest;
	cmds[61].loc = &ob->wrist.nocenter3d;
	cmds[62].loc = &ob->wrist.ps_adap_going_up;
	cmds[63].loc = &ob->wrist.velmag;
	cmds[64].loc = &ob->wrist.accelmag;
	cmds[65].loc = &ob->wrist.jerkmag;
	cmds[66].loc = &ob->wrist.ft_motor_force;
	cmds[67].loc = &rob->wrist.left.enc_channel;
	cmds[68].loc = &rob->wrist.left.disp;
	cmds[69].loc = &rob->wrist.left.vel;
	cmds[70].loc = &rob->wrist.left.torque;
	cmds[71].loc = &rob->wrist.left.devtrq;
	cmds[72].loc = &rob->wrist.left.xform;
	cmds[73].loc = &rob->wrist.left.enc_xform;
	cmds[74].loc = &rob->wrist.left.bias;
	cmds[75].loc = &rob->wrist.left.volts;
	cmds[76].loc = &rob->wrist.left.test_volts;
	cmds[77].loc = &rob->wrist.left.ao_channel;
	cmds[78].loc = &rob->wrist.right.enc_channel;
	cmds[79].loc = &rob->wrist.right.disp;
	cmds[80].loc = &rob->wrist.right.vel;
	cmds[81].loc = &rob->wrist.right.torque;
	cmds[82].loc = &rob->wrist.right.devtrq;
	cmds[83].loc = &rob->wrist.right.xform;
	cmds[84].loc = &rob->wrist.right.enc_xform;
	cmds[85].loc = &rob->wrist.right.bias;
	cmds[86].loc = &rob->wrist.right.volts;
	cmds[87].loc = &rob->wrist.right.test_volts;
	cmds[88].loc = &rob->wrist.right.ao_channel;
	cmds[89].loc = &rob->wrist.ps.enc_channel;
	cmds[90].loc = &rob->wrist.ps.disp;
	cmds[91].loc = &rob->wrist.ps.vel;
	cmds[92].loc = &rob->wrist.ps.torque;
	cmds[93].loc = &rob->wrist.ps.devtrq;
	cmds[94].loc = &rob->wrist.ps.xform;
	cmds[95].loc = &rob->wrist.ps.enc_xform;
	cmds[96].loc = &rob->wrist.ps.bias;
	cmds[97].loc = &rob->wrist.ps.volts;
	cmds[98].loc = &rob->wrist.ps.test_volts;
	cmds[99].loc = &rob->wrist.ps.ao_channel;
	cmds[100].loc = &rob->wrist.gears.diff;
	cmds[101].loc = &rob->wrist.gears.ps;
	cmds[102].loc = &rob->wrist.uei_ao_board_handle;
	cmds[103].loc = &ob->have_wrist;
	cmds[104].loc = &ob->wrist.pos.fe;
	cmds[105].loc = &ob->wrist.pos.aa;
	cmds[106].loc = &ob->wrist.pos.ps;
	cmds[107].loc = &ob->wrist.vel.fe;
	cmds[108].loc = &ob->wrist.vel.aa;
	cmds[109].loc = &ob->wrist.vel.ps;
	cmds[110].loc = &ob->wrist.fvel.fe;
	cmds[111].loc = &ob->wrist.fvel.aa;
	cmds[112].loc = &ob->wrist.fvel.ps;
	cmds[113].loc = &ob->wrist.torque.fe;
	cmds[114].loc = &ob->wrist.torque.aa;
	cmds[115].loc = &ob->wrist.torque.ps;
	cmds[116].loc = &ob->wrist.offset.fe;
	cmds[117].loc = &ob->wrist.offset.aa;
	cmds[118].loc = &ob->wrist.offset.ps;
	cmds[119].loc = &ob->wrist.moment_cmd.fe;
	cmds[120].loc = &ob->wrist.moment_cmd.aa;
	cmds[121].loc = &ob->wrist.moment_cmd.ps;
	cmds[122].loc = &ob->wrist.norm.fe;
	cmds[123].loc = &ob->wrist.norm.aa;
	cmds[124].loc = &ob->wrist.norm.ps;
	cmds[125].loc = &ob->wrist.back.fe;
	cmds[126].loc = &ob->wrist.back.aa;
	cmds[127].loc = &ob->wrist.back.ps;
	cmds[128].loc = &ob->ankle.stiff;
	cmds[129].loc = &ob->ankle.damp;
	cmds[130].loc = &ob->ankle.ueimf;
	cmds[131].loc = &ob->ankle.rl_pfomax;
	cmds[132].loc = &ob->ankle.rl_pfotest;
	cmds[133].loc = &rob->ankle.left.enc_channel;
	cmds[134].loc = &rob->ankle.left.disp;
	cmds[135].loc = &rob->ankle.left.devtrq;
	cmds[136].loc = &rob->ankle.left.xform;
	cmds[137].loc = &rob->ankle.left.volts;
	cmds[138].loc = &rob->ankle.left.force;
	cmds[139].loc = &rob->ankle.left.test_volts;
	cmds[140].loc = &rob->ankle.left.ao_channel;
	cmds[141].loc = &rob->ankle.left.rot_enc_channel;
	cmds[142].loc = &rob->ankle.left.rot_disp;
	cmds[143].loc = &rob->ankle.left.rot_lin_disp;
	cmds[144].loc = &rob->ankle.left.vel;
	cmds[145].loc = &rob->ankle.left.rot_lin_vel;
	cmds[146].loc = &rob->ankle.right.enc_channel;
	cmds[147].loc = &rob->ankle.right.disp;
	cmds[148].loc = &rob->ankle.right.devtrq;
	cmds[149].loc = &rob->ankle.right.xform;
	cmds[150].loc = &rob->ankle.right.volts;
	cmds[151].loc = &rob->ankle.right.force;
	cmds[152].loc = &rob->ankle.right.test_volts;
	cmds[153].loc = &rob->ankle.right.ao_channel;
	cmds[154].loc = &rob->ankle.right.rot_enc_channel;
	cmds[155].loc = &rob->ankle.right.rot_disp;
	cmds[156].loc = &rob->ankle.right.rot_lin_disp;
	cmds[157].loc = &rob->ankle.right.vel;
	cmds[158].loc = &rob->ankle.right.rot_lin_vel;
	cmds[159].loc = &ob->have_ankle;
	cmds[160].loc = &ob->ankle.pos.dp;
	cmds[161].loc = &ob->ankle.vel.dp;
	cmds[162].loc = &ob->ankle.fvel.dp;
	cmds[163].loc = &ob->ankle.accel.dp;
	cmds[164].loc = &ob->ankle.torque.dp;
	cmds[165].loc = &ob->ankle.moment_cmd.dp;
	cmds[166].loc = &ob->ankle.offset.dp;
	cmds[167].loc = &ob->ankle.norm.dp;
	cmds[168].loc = &ob->ankle.back.dp;
	cmds[169].loc = &ob->ankle.pos.ie;
	cmds[170].loc = &ob->ankle.vel.ie;
	cmds[171].loc = &ob->ankle.fvel.ie;
	cmds[172].loc = &ob->ankle.accel.ie;
	cmds[173].loc = &ob->ankle.torque.ie;
	cmds[174].loc = &ob->ankle.moment_cmd.ie;
	cmds[175].loc = &ob->ankle.offset.ie;
	cmds[176].loc = &ob->ankle.norm.ie;
	cmds[177].loc = &ob->ankle.back.ie;
	cmds[178].loc = &ob->ankle.accel_mag;
	cmds[179].loc = &ob->ankle.vel_mag;
	cmds[180].loc = &ob->ankle.safety_vel;
	cmds[181].loc = &ob->ankle.safety_accel;
	cmds[182].loc = &rob->ankle.trans.ratio;
	cmds[183].loc = &rob->ankle.trans.lead;
	cmds[184].loc = &rob->ankle.trans.ankle_ball_length;
	cmds[185].loc = &rob->ankle.trans.ball_ball_width;
	cmds[186].loc = &rob->ankle.trans.av_actuator_length;
	cmds[187].loc = &rob->ankle.trans.av_shin_length;
	cmds[188].loc = &rob->ankle.trans.enc_xform;
	cmds[189].loc = &rob->ankle.trans.slip_thresh;
	cmds[190].loc = &rob->ankle.uei_ao_board_handle;
	cmds[191].loc = &rob->ankle.knee.channel;
	cmds[192].loc = &rob->ankle.knee.raw;
	cmds[193].loc = &rob->ankle.knee.xform1;
	cmds[194].loc = &rob->ankle.knee.xform2;
	cmds[195].loc = &rob->ankle.knee.bias;
	cmds[196].loc = &rob->ankle.knee.gain;
	cmds[197].loc = &rob->ankle.knee.angle;
	cmds[198].loc = &ob->linear.stiff;
	cmds[199].loc = &ob->linear.damp;
	cmds[200].loc = &ob->linear.pfomax;
	cmds[201].loc = &ob->linear.pfotest;
	cmds[202].loc = &ob->linear.adap_going_up;
	cmds[203].loc = &rob->linear.motor.enc_channel;
	cmds[204].loc = &rob->linear.motor.disp;
	cmds[205].loc = &rob->linear.motor.devfrc;
	cmds[206].loc = &rob->linear.motor.xform;
	cmds[207].loc = &rob->linear.motor.volts;
	cmds[208].loc = &rob->linear.motor.test_volts;
	cmds[209].loc = &rob->linear.motor.ao_channel;
	cmds[210].loc = &rob->linear.motor.limit_volts;
	cmds[211].loc = &rob->linear.motor.limit_channel;
	cmds[212].loc = &ob->have_linear;
	cmds[213].loc = &ob->linear.pos;
	cmds[214].loc = &ob->linear.vel;
	cmds[215].loc = &ob->linear.fvel;
	cmds[216].loc = &ob->linear.force;
	cmds[217].loc = &ob->linear.force_bias;
	cmds[218].loc = &ob->linear.offset;
	cmds[219].loc = &ob->linear.ref_pos;
	cmds[220].loc = &ob->linear.back;
	cmds[221].loc = &ob->linear.norm;
	cmds[222].loc = &rob->linear.gears.ratio;
	cmds[223].loc = &rob->linear.uei_ao_board_handle;
	cmds[224].loc = &ob->hand.stiff;
	cmds[225].loc = &ob->hand.damp;
	cmds[226].loc = &ob->hand.pfomax;
	cmds[227].loc = &ob->hand.pfotest;
	cmds[228].loc = &ob->hand.adap_going_up;
	cmds[229].loc = &rob->hand.motor.enc_channel;
	cmds[230].loc = &rob->hand.motor.disp;
	cmds[231].loc = &rob->hand.motor.devfrc;
	cmds[232].loc = &rob->hand.motor.xform;
	cmds[233].loc = &rob->hand.motor.bias;
	cmds[234].loc = &rob->hand.motor.volts;
	cmds[235].loc = &rob->hand.motor.test_volts;
	cmds[236].loc = &rob->hand.motor.ao_channel;
	cmds[237].loc = &rob->hand.motor.limit_volts;
	cmds[238].loc = &rob->hand.motor.limit_channel;
	cmds[239].loc = &ob->have_hand;
	cmds[240].loc = &ob->hand.pos;
	cmds[241].loc = &ob->hand.vel;
	cmds[242].loc = &ob->hand.fvel;
	cmds[243].loc = &ob->hand.force;
	cmds[244].loc = &ob->hand.grasp;
	cmds[245].loc = &ob->hand.force_bias;
	cmds[246].loc = &ob->hand.ref_pos;
	cmds[247].loc = &rob->hand.gears.ratio;
	cmds[248].loc = &rob->hand.gears.xform;
	cmds[249].loc = &rob->hand.gears.disp_xform;
	cmds[250].loc = &rob->hand.gears.offset;
	cmds[251].loc = &rob->hand.gears.span;
	cmds[252].loc = &rob->hand.gears.gap;
	cmds[253].loc = &rob->hand.uei_ao_board_handle;
	cmds[254].loc = &ob->hand.active_power;
	cmds[255].loc = &ob->hand.npoints;
	cmds[256].loc = &daq->ain_bias_comp;
	cmds[257].loc = &daq->ain_cfg;
	cmds[258].loc = &daq->ain_slowbit;
	cmds[259].loc = &daq->ain_got_samples;
	cmds[260].loc = &daq->ain_ret;
	cmds[261].loc = &daq->n_ueidaq_boards;
	cmds[262].loc = &daq->uei_board[0];
	cmds[263].loc = &ob->busy;
	cmds[264].loc = &ob->curl;
	cmds[265].loc = &ob->damp;
	cmds[266].loc = &ob->const_force.x;
	cmds[267].loc = &ob->const_force.y;
	cmds[268].loc = &ob->quit;
	cmds[269].loc = &ob->doinit;
	cmds[270].loc = &ob->didinit;
	cmds[271].loc = &ob->butcutoff;
	cmds[272].loc = &ob->ddfifo;
	cmds[273].loc = &ob->cififo;
	cmds[274].loc = &ob->dififo;
	cmds[275].loc = &ob->dofifo;
	cmds[276].loc = &ob->eofifo;
	cmds[277].loc = &ob->fifolen;
	cmds[278].loc = &ob->tcfifo;
	cmds[279].loc = &ob->ftfifo;
	cmds[280].loc = &ob->ntickfifo;
	cmds[281].loc = &ob->fttickfifo;
	cmds[282].loc = &ob->motor_torque.s;
	cmds[283].loc = &ob->motor_torque.e;
	cmds[284].loc = &ob->motor_volts.s;
	cmds[285].loc = &ob->motor_volts.e;
	cmds[286].loc = &rob->link.s;
	cmds[287].loc = &rob->link.e;
	cmds[288].loc = &ob->have_planar;
	cmds[289].loc = &ob->have_uei;
	cmds[290].loc = &ob->have_tach;
	cmds[291].loc = &ob->have_ft;
	cmds[292].loc = &ob->have_grasp;
	cmds[293].loc = &ob->have_accel;
	cmds[294].loc = &ob->have_planar_incenc;
	cmds[295].loc = &ob->have_planar_ao8;
	cmds[296].loc = &ob->have_mf_aout_for_dout;
	cmds[297].loc = &ob->ankle_debug_position;
	cmds[298].loc = &ob->have_thermal_model;
	cmds[299].loc = &ob->Hz;
	cmds[300].loc = &ob->i;
	cmds[301].loc = &ob->fasti;
	cmds[302].loc = &ob->fastHz;
	cmds[303].loc = &ob->fastirate;
	cmds[304].loc = &ob->fastrate;
	cmds[305].loc = &ob->ovsample;
	cmds[306].loc = &ob->irate;
	cmds[307].loc = &ob->disp[0];
	cmds[308].loc = &ob->ndisp;
	cmds[309].loc = &ob->log;
	cmds[310].loc = &ob->nlog;
	cmds[311].loc = &ob->logfnid;
	cmds[312].loc = &ob->refin;
	cmds[313].loc = &ob->nwref;
	cmds[314].loc = &ob->nrref;
	cmds[315].loc = &ob->reffnid;
	cmds[316].loc = &ob->refri;
	cmds[317].loc = &ob->refwi;
	cmds[318].loc = &ob->refterm;
	cmds[319].loc = &ob->ref_switchback_go;
	cmds[320].loc = &rob->offset.x;
	cmds[321].loc = &rob->offset.y;
	cmds[322].loc = &ob->paused;
	cmds[323].loc = &ob->fault;
	cmds[324].loc = &ob->stiffener;
	cmds[325].loc = &ob->stiff_delta;
	cmds[326].loc = &ob->no_motors;
	cmds[327].loc = &ob->pi;
	cmds[328].loc = &ob->pfomax;
	cmds[329].loc = &ob->pfotest;
	cmds[330].loc = &ob->impulse_thresh_volts;
	cmds[331].loc = &ob->dvolts.s;
	cmds[332].loc = &ob->dvolts.e;
	cmds[333].loc = &ob->rate;
	cmds[334].loc = &ob->restart.damp;
	cmds[335].loc = &ob->restart.go;
	cmds[336].loc = &ob->restart.Hz;
	cmds[337].loc = &ob->restart.ovsample;
	cmds[338].loc = &ob->restart.stiff;
	cmds[339].loc = &ob->safety.override;
	cmds[340].loc = &ob->safety.damping_nms;
	cmds[341].loc = &ob->safety.pos;
	cmds[342].loc = &ob->safety.torque;
	cmds[343].loc = &ob->safety.ramp;
	cmds[344].loc = &ob->safety.vel;
	cmds[345].loc = &ob->safety.planar_just_crossed_back;
	cmds[346].loc = &ob->safety.was_planar_damping;
	cmds[347].loc = &ob->safety.damp_ret_ticks;
	cmds[348].loc = &ob->safety.damp_ret_secs;
	cmds[349].loc = &ob->samplenum;
	cmds[350].loc = &ob->vibrate;
	cmds[351].loc = &ob->xvibe;
	cmds[352].loc = &ob->yvibe;
	cmds[353].loc = &ob->tsvibe;
	cmds[354].loc = &ob->tevibe;
	cmds[355].loc = &ob->tvibamp;
	cmds[356].loc = &ob->test_raw_torque;
	cmds[357].loc = &ob->raw_torque_volts.s;
	cmds[358].loc = &ob->raw_torque_volts.e;
	cmds[359].loc = &ob->test_no_torque;
	cmds[360].loc = &ob->sin_amplitude;
	cmds[361].loc = &ob->sin_period;
	cmds[362].loc = &ob->sin_which_motor;
	cmds[363].loc = &ob->sim.sensors;
	cmds[364].loc = &ob->sim.pos.x;
	cmds[365].loc = &ob->sim.pos.y;
	cmds[366].loc = &ob->sim.wr_pos.fe;
	cmds[367].loc = &ob->sim.wr_pos.ps;
	cmds[368].loc = &ob->sim.wr_pos.aa;
	cmds[369].loc = &ob->sim.vel.x;
	cmds[370].loc = &ob->sim.vel.y;
	cmds[371].loc = &ob->sim.wr_vel.fe;
	cmds[372].loc = &ob->sim.wr_vel.ps;
	cmds[373].loc = &ob->sim.wr_vel.aa;
	cmds[374].loc = &ob->req_pos.x;
	cmds[375].loc = &ob->req_pos.y;
	cmds[376].loc = &ob->pos_error.mod;
	cmds[377].loc = &ob->pos_error.dx;
	cmds[378].loc = &ob->pos_error.dy;
	cmds[379].loc = &ob->copy_slot.id;
	cmds[380].loc = &ob->copy_slot.i;
	cmds[381].loc = &ob->copy_slot.incr;
	cmds[382].loc = &ob->copy_slot.term;
	cmds[383].loc = &ob->copy_slot.termi;
	cmds[384].loc = &ob->copy_slot.b0.point.x;
	cmds[385].loc = &ob->copy_slot.b0.point.y;
	cmds[386].loc = &ob->copy_slot.b0.w;
	cmds[387].loc = &ob->copy_slot.b0.h;
	cmds[388].loc = &ob->copy_slot.b1.point.x;
	cmds[389].loc = &ob->copy_slot.b1.point.y;
	cmds[390].loc = &ob->copy_slot.b1.w;
	cmds[391].loc = &ob->copy_slot.b1.h;
	cmds[392].loc = &ob->copy_slot.fnid;
	cmds[393].loc = &ob->copy_slot.rot;
	cmds[394].loc = &ob->copy_slot.go;
	cmds[395].loc = &ob->copy_slot.running;
	cmds[396].loc = &ob->slot_max;
	cmds[397].loc = &ob->slot[0].id;
	cmds[398].loc = &ob->slot[0].i;
	cmds[399].loc = &ob->slot[0].incr;
	cmds[400].loc = &ob->slot[0].term;
	cmds[401].loc = &ob->slot[0].termi;
	cmds[402].loc = &ob->slot[0].b0.point.x;
	cmds[403].loc = &ob->slot[0].b0.point.y;
	cmds[404].loc = &ob->slot[0].b0.w;
	cmds[405].loc = &ob->slot[0].b0.h;
	cmds[406].loc = &ob->slot[0].b1.point.x;
	cmds[407].loc = &ob->slot[0].b1.point.y;
	cmds[408].loc = &ob->slot[0].b1.w;
	cmds[409].loc = &ob->slot[0].b1.h;
	cmds[410].loc = &ob->slot[0].bcur.point.x;
	cmds[411].loc = &ob->slot[0].bcur.point.y;
	cmds[412].loc = &ob->slot[0].bcur.w;
	cmds[413].loc = &ob->slot[0].bcur.h;
	cmds[414].loc = &ob->slot[0].fnid;
	cmds[415].loc = &ob->slot[0].rot;
	cmds[416].loc = &ob->slot[0].running;
	cmds[417].loc = &ob->slot[0].go;
	cmds[418].loc = &ob->slot[1].b0.point.x;
	cmds[419].loc = &ob->slot[1].b0.point.y;
	cmds[420].loc = &ob->slot[1].b0.w;
	cmds[421].loc = &ob->slot[1].b0.h;
	cmds[422].loc = &ob->pm.active_power;
	cmds[423].loc = &ob->pm.robot_power;
	cmds[424].loc = &ob->pm.min_jerk_deviation;
	cmds[425].loc = &ob->pm.min_jerk_dgraph;
	cmds[426].loc = &ob->pm.jerkmag;
	cmds[427].loc = &ob->pm.dist_straight_line;
	cmds[428].loc = &ob->pm.max_dist_along_axis;
	cmds[429].loc = &ob->pm.min_dist_from_target;
	cmds[430].loc = &ob->pm.max_vel;
	cmds[431].loc = &ob->pm.npoints;
	cmds[432].loc = &ob->pm.five_d;
	cmds[433].loc = &ob->pm.done_npoints;
	cmds[434].loc = &ob->pm.done_active_power;
	cmds[435].loc = &ob->pm.done_robot_power;
	cmds[436].loc = &ob->pm.done_min_jerk_deviation;
	cmds[437].loc = &ob->pm.done_min_jerk_dgraph;
	cmds[438].loc = &ob->pm.done_jerkmag;
	cmds[439].loc = &ob->pm.done_max_vel;
	cmds[440].loc = &ob->pm.done_dist_straight_line_sq;
	cmds[441].loc = &ob->pm.done_max_dist_along_axis;
	cmds[442].loc = &ob->pm.done_min_dist_from_target;
	cmds[443].loc = &ob->pm.done_hand_pct_in;
	cmds[444].loc = &ob->pm.done_hand_pct_out;
	cmds[445].loc = &ob->scr[0];
	cmds[446].loc = &ob->scr[0];
	cmds[447].loc = &ob->scr[1];
	cmds[448].loc = &ob->scr[2];
	cmds[449].loc = &ob->scr[3];
	cmds[450].loc = &ob->scr[4];
	cmds[451].loc = &ob->scr[5];
	cmds[452].loc = &ob->scr[6];
	cmds[453].loc = &ob->scr[7];
	cmds[454].loc = &ob->aodiff[0];
	cmds[455].loc = &ob->aocum[0];
	cmds[456].loc = &ob->aorms[0];
	cmds[457].loc = &ob->aocum1[0];
	cmds[458].loc = &ob->aoavg[0];
	cmds[459].loc = &ob->aocount;
	cmds[460].loc = &ob->pl_stopspan;
	cmds[461].loc = &ob->pl_linkspan;
	cmds[462].loc = &ob->pl_vbig;
	cmds[463].loc = &ob->pl_vsmall;
	cmds[464].loc = &ob->pl_vtiny;
	cmds[465].loc = &ob->pl_slop;
	cmds[466].loc = &ob->ha_vbig;
	cmds[467].loc = &ob->ha_vsmall;
	cmds[468].loc = &ob->ha_slop;
	cmds[469].loc = &ob->wr_diffslop;
	cmds[470].loc = &ob->wr_psslop;
	cmds[471].loc = &ob->wr_rspan;
	cmds[472].loc = &ob->wr_lspan;
	cmds[473].loc = &ob->wr_psspan;
	cmds[474].loc = &ob->wr_vbig;
	cmds[475].loc = &ob->wr_vsmall;
	cmds[476].loc = &daq->m_dienc[0][0];
	cmds[477].loc = &daq->dienc_vel[0];
	cmds[478].loc = &daq->dienc_accel[0];
	cmds[479].loc = &daq->diovs;
	cmds[480].loc = &daq->m_dout_buf[0];
	cmds[481].loc = &daq->dout0;
	cmds[482].loc = &daq->dout1;
	cmds[483].loc = &daq->dout_latch;
	cmds[484].loc = &daq->m_adc[0][0];
	cmds[485].loc = &daq->m_dac[0][0];
	cmds[486].loc = &daq->m_adcvolts[0][0];
	cmds[487].loc = &daq->m_adcvoltsmean[0][0];
	cmds[488].loc = &daq->m_adcvoltsmed[0][0];
	cmds[489].loc = &daq->m_dacvolts[0][0];
	cmds[490].loc = &daq->distat[0];
	cmds[491].loc = &rob->ft.flip;
	cmds[492].loc = &rob->ft.vert;
	cmds[493].loc = &rob->ft.have_rotmat;
	cmds[494].loc = &rob->ft.rotmat_setup_done;
	cmds[495].loc = &rob->ft.rot.x;
	cmds[496].loc = &rob->ft.rot.y;
	cmds[497].loc = &rob->ft.rot.z;
	cmds[498].loc = &rob->ft.righthand;
	cmds[499].loc = &rob->ft.pre_jac.x;
	cmds[500].loc = &rob->ft.pre_jac.y;
	cmds[501].loc = &rob->ft.pre_jac.z;
	cmds[502].loc = &rob->ft.rotmat[0][0];
	cmds[503].loc = &rob->ft.dobias;
	cmds[504].loc = &rob->ft.offset;
	cmds[505].loc = &rob->ft.channel[0];
	cmds[506].loc = &rob->ft.raw[0];
	cmds[507].loc = &rob->ft.curr[0];
	cmds[508].loc = &rob->ft.prev[0];
	cmds[509].loc = &rob->ft.filt[0];
	cmds[510].loc = &rob->ft.sg[0];
	cmds[511].loc = &rob->ft.prevf[0];
	cmds[512].loc = &rob->ft.world.x;
	cmds[513].loc = &rob->ft.world.y;
	cmds[514].loc = &rob->ft.world.z;
	cmds[515].loc = &rob->ft.dev.x;
	cmds[516].loc = &rob->ft.dev.y;
	cmds[517].loc = &rob->ft.dev.z;
	cmds[518].loc = &rob->ft.moment.x;
	cmds[519].loc = &rob->ft.moment.y;
	cmds[520].loc = &rob->ft.moment.z;
	cmds[521].loc = &rob->ft.xymag;
	cmds[522].loc = &rob->ft.cal[0][0];
	cmds[523].loc = &rob->ft.scale[0];
	cmds[524].loc = &rob->ft.bias[0];
	cmds[525].loc = &rob->ft.cooked[0];
	cmds[526].loc = &rob->ft.avg[0];
	cmds[527].loc = &rob->ft.sghist[0][0];
	cmds[528].loc = &rob->ft.status;
	cmds[529].loc = &rob->ft.cal[0][1];
	cmds[530].loc = &rob->ft.cal[1][0];
	cmds[531].loc = &rob->ft.cal[1][1];
	cmds[532].loc = &rob->accel.channel[0];
	cmds[533].loc = &rob->accel.raw[0];
	cmds[534].loc = &rob->accel.curr[0];
	cmds[535].loc = &rob->accel.bias[0];
	cmds[536].loc = &rob->accel.xform;
	cmds[537].loc = &rob->accel.filt[0];
	cmds[538].loc = &rob->accel.filt[1];
	cmds[539].loc = &rob->accel.filt[2];
	cmds[540].loc = &rob->grasp.channel;
	cmds[541].loc = &rob->grasp.raw;
	cmds[542].loc = &rob->grasp.bias;
	cmds[543].loc = &rob->grasp.cal;
	cmds[544].loc = &rob->grasp.gain;
	cmds[545].loc = &rob->grasp.force;
	cmds[546].loc = &ob->have_can;
	cmds[547].loc = &rob->can.fd;
	cmds[548].loc = &rob->can.axis;
	cmds[549].loc = &rob->can.value;
	cmds[550].loc = &rob->can.analog1;
	cmds[551].loc = &rob->can.analog2;
	cmds[552].loc = &rob->can.pos_raw;
	cmds[553].loc = &rob->can.pos2_raw;
	cmds[554].loc = &rob->can.vel_raw;
	cmds[555].loc = &rob->can.read_error;
	cmds[556].loc = &rob->can.status;
	cmds[557].loc = &rob->can.bitmask;
	cmds[558].loc = &rob->can.recv_count;
	cmds[559].loc = &rob->can.pos_sync_time;
	cmds[560].loc = &rob->can.pos_time;
	cmds[561].loc = &rob->can.max_pos_time;
	cmds[562].loc = &rob->can.pos_wait_time;
	cmds[563].loc = &rob->can.setct;
	cmds[564].loc = &ob->naxes;
	cmds[565].loc = &ob->rshm_count;
	cmds[566].loc = &ob->wshm_count;
	cmds[567].loc = &rob->pci4e.have;
	cmds[568].loc = &rob->pci4e.bar;
	cmds[569].loc = &rob->pci4e.remap;
	cmds[570].loc = &rob->pci4e.len;
	cmds[571].loc = &rob->pci4e.dev;
	cmds[572].loc = &rob->pci4e.enc;
	cmds[573].loc = &rob->pci4e.lenc;
	cmds[574].loc = &rob->pci4e.raw;
	cmds[575].loc = &rob->pci4e.ret;
	cmds[576].loc = &rob->pci4e.nerrs;
	cmds[577].loc = &rob->pci4e.lastret;
	cmds[578].loc = &rob->pci4e.limit;
	cmds[579].loc = &rob->pci4e.scale;
	cmds[580].loc = &rob->pci4e.zero;
	cmds[581].loc = &rob->pci4e.dosetct;
	cmds[582].loc = &rob->pci4e.setct;
	cmds[583].loc = &ob->stiff;
	cmds[584].loc = &ob->side_stiff;
	cmds[585].loc = &ob->friction;
	cmds[586].loc = &ob->friction_gap;
	cmds[587].loc = &ob->tag[0];
	cmds[588].loc = &ob->times.time_after_last_sample;
	cmds[589].loc = &ob->times.time_after_sample;
	cmds[590].loc = &ob->times.time_at_start;
	cmds[591].loc = &ob->times.time_before_last_sample;
	cmds[592].loc = &ob->times.time_before_sample;
	cmds[593].loc = &ob->times.time_delta_call;
	cmds[594].loc = &ob->times.time_delta_sample;
	cmds[595].loc = &ob->times.time_delta_tick;
	cmds[596].loc = &ob->times.time_since_start;
	cmds[597].loc = &ob->times.ns_delta_call;
	cmds[598].loc = &ob->times.ns_delta_sample;
	cmds[599].loc = &ob->times.ns_delta_tick;
	cmds[600].loc = &ob->times.ms_since_start;
	cmds[601].loc = &ob->times.sec;
	cmds[602].loc = &ob->times.ns_delta_sample_thresh;
	cmds[603].loc = &ob->times.ns_delta_tick_thresh;
	cmds[604].loc = &ob->times.ns_max_delta_sample;
	cmds[605].loc = &ob->times.ns_max_delta_tick;
	cmds[606].loc = &ob->total_samples;
	cmds[607].loc = &ob->pos.x;
	cmds[608].loc = &ob->pos.y;
	cmds[609].loc = &ob->ref.pos.x;
	cmds[610].loc = &ob->ref.pos.y;
	cmds[611].loc = &ob->motor_force.x;
	cmds[612].loc = &ob->motor_force.y;
	cmds[613].loc = &ob->soft_vel.x;
	cmds[614].loc = &ob->soft_vel.y;
	cmds[615].loc = &ob->fsoft_vel.x;
	cmds[616].loc = &ob->fsoft_vel.y;
	cmds[617].loc = &ob->tach_vel.x;
	cmds[618].loc = &ob->tach_vel.y;
	cmds[619].loc = &ob->vel.x;
	cmds[620].loc = &ob->vel.y;
	cmds[621].loc = &ob->velmag;
	cmds[622].loc = &ob->soft_accel.x;
	cmds[623].loc = &ob->soft_accel.y;
	cmds[624].loc = &ob->soft_accelmag;
	cmds[625].loc = &ob->soft_jerk.x;
	cmds[626].loc = &ob->soft_jerk.y;
	cmds[627].loc = &ob->soft_jerkmag;
	cmds[628].loc = &ob->theta.s;
	cmds[629].loc = &ob->theta.e;
	cmds[630].loc = &ob->thetadot.s;
	cmds[631].loc = &ob->thetadot.e;
	cmds[632].loc = &ob->spring.ref.s;
	cmds[633].loc = &ob->spring.ref.e;
	cmds[634].loc = &ob->spring.stiff.s;
	cmds[635].loc = &ob->spring.stiff.e;
	cmds[636].loc = &ob->spring.disp.s;
	cmds[637].loc = &ob->spring.disp.e;
	cmds[638].loc = &ob->back.x;
	cmds[639].loc = &ob->back.y;
	cmds[640].loc = &ob->norm.x;
	cmds[641].loc = &ob->norm.y;
	cmds[642].loc = &ob->planar_uei_ao_board_handle;
	cmds[643].loc = &ob->errnum;
	cmds[644].loc = &ob->nerrors;
	cmds[645].loc = &ob->errori[0];
	cmds[646].loc = &ob->errorcode[0];
	cmds[647].loc = &ob->errorindex;
	cmds[648].loc = &refbuf->refarr[0][0];
	cmds[649].loc = &ob->asciilog;
	cmds[650].loc = &ob->targetnumber;
	cmds[651].loc = &ob->last_shm_val;
}
