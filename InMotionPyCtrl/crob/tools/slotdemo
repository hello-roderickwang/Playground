#!/usr/bin/wish

# slotdemo: show slot walls to demonstrate force fields

# InMotion2 robot system software

# Copyright 2003-2013 Interactive Motion Technologies, Inc.
# Watertown, MA, USA
# http://www.interactive-motion.com
# All rights reserved

package require Tk

global ob

set ob(crobhome) $::env(CROB_HOME)

source $ob(crobhome)/shm.tcl

set ob(current_robot) [current_robot]

if {$ob(current_robot) != "planar"
    && $ob(current_robot) != "planarhand"
    && $ob(current_robot) != "planarwrist"} {
        tk_messageBox -title Failed -message "This robot is configured as a $ob(current_robot)\
and slotdemo only works on planar."
        exit 1
}

set ob(color,pos) yellow
set ob(color,boxslot) magenta
set ob(color,frc) cyan

# this scales everything
# (scaling does not change line widths)
set ob(scale) 1000.0

proc slot_to_bbox {slot} {
        foreach {x y w h} $slot break
        set w2 [expr {$w / 2.}]
        set h2 [expr {$h / 2.}]
        set x1 [expr {$x - $w2}]
        set y1 [expr {$y - $h2}]
        set x2 [expr {$x + $w2}]
        set y2 [expr {$y + $h2}]
        return [list $x1 $y1 $x2 $y2]
}

proc vex {w} {
	global ob

	# display canvas
	set c [canvas $w.c -height 600 -width 600 -bg gray20]
	chwin $c [winfo width $c] [winfo height $c] 

	set linewidth 10

	# 1 screen pixel == 1 world mm

        # mark the center
        foreach x {-.15 0 .15} {
        foreach y {-.15 0 .15} {
        $c create oval [centxy $x $y .005] -fill black
        }}

        $c create line {0 0 0 0} \
                -tag "vecfrc" -width 10 -arrow last -fill $ob(color,frc)

	# the yellow position cursor dot
	$c create oval [centxy 0 0 .01] \
		-tags "kscale circlep" -fill $ob(color,pos)

        # the boxslot rectangle
        $c create rect {0 0 0 0} -tag "boxslot kscale" -outline $ob(color,boxslot) -width 3

	$c scale all 0 0 $ob(scale) $ob(scale)

	# handle resize
	bind $c <Configure> [list after idle chwin $c %w %h]

	return $c
}

# handle window resize
proc chwin {c w h} {
	set w2 [expr {$w / 2}]
	set h2 [expr {$h / 2}]
	set hx125 [expr {$h * 1.25}]
	# translate from 0,0 in upper left to 0,0 in center
	$c config -scrollregion [list -$w2 -$hx125 $w2 $h2]
}

set ob(cwd) [pwd]
set ob(savedatpid) 0
set ob(loaded) 0
set ob(running) 0

# set up vex window

proc init {} {
	global data ob

	wm withdraw .
	toplevel .top
	set w ".top"
	wm title .top "Slot Demo Buttons"

	# widget definitions

	# buttons across top in a frame

	frame $w.f
	pack $w.f

	foreach i {load run swing square quit} {
		button $w.f.b_${i} -text "$i" -command [list b_${i}_proc $w]
	}

	$w.f.b_load config -bg green1
	$w.f.b_run config -bg red -state disabled
	$w.f.b_quit config -bg red

	# status at the bottom

	set ::font "Helvetica 24"

	# widget placement

	pack $w.f.b_load $w.f.b_run \
            $w.f.b_swing $w.f.b_square \
            $w.f.b_quit -side left

	# canvas in a separate toplevel window

	toplevel .vex
	wm title .vex "Slot Demo"

	set ob(vexw) [vex .vex]
	pack $ob(vexw)
}

# b_quit_proc called when quit button is pressed

proc b_quit_proc {w} {

	# puts "called quit"
	b_unload_proc $w
	after 1000 exit
}

# b_load_proc called when load button is pressed

proc b_load_proc {w} {
	global ob

	# puts "called load"
	if {$ob(loaded)} {
		puts "load: already loaded"
		return
	}
	set ob(loaded) 1
	$w.f.b_load config -text ... -command "" -bg red
	start_lkm
	start_shm
	$w.f.b_run config -text run -command [list b_run_proc $w] -bg green1 -state normal
	$w.f.b_load config -text unload -command [list b_unload_proc $w] -bg red
	set ob(neg_off_y) [expr 0.0 - [rshm offset_y]]
}

proc cancel_swing {} {
        after cancel b_swing_proc
        after cancel swing_proc2
        after cancel right_proc
        after cancel left_proc
}

proc b_swing_proc {w} {
        cancel_swing

        center_arm
        after 3000 swing_proc2
}

proc swing_proc2 {} {
        cancel_swing

        right_proc
        after 10000 left_proc
        after 20000 swing_proc2
}

proc left_proc {} {
        movebox 0 0 {0 2000 1} {0 0 .30 .03} {-.15 0 0 .03}
}

proc right_proc {} {
        movebox 0 0 {0 2000 1} {0 0 .30 .03} {.15 0 0 .03}
}

proc b_square_proc {w} {
        cancel_swing
        movebox 0 0 {0 1 0} {0 0 .2 .2} {0 0 .2 .2} 
}

# b_unload_proc called when unload button is pressed

proc b_unload_proc {w} {
	global ob

	# puts "called unload"

	if {!$ob(loaded)} {
		puts "load: already unloaded"
		return
	}

	b_pause_proc $w
	# pause pauses actuator output, stop stops all main loop i/o.
	stop_loop
	stop_shm
	stop_lkm
	$w.f.b_load config -text load -command [list b_load_proc $w] -bg green1
	$w.f.b_run config -state disabled -bg red
}

# b_run_proc called when run button is pressed

proc b_run_proc {w} {
	global ob

	# puts "called run"
	if {!$ob(loaded)} {
		puts "run: not yet loaded"
		return
	}
	if {$ob(running)} {
		puts "run: already running"
		return
	}
	set ob(running) 1
	wshm have_thermal_model 0
	wshm no_safety_check 1
	wshm stiff 100.0
	wshm damp 1

	after 100
	start_loop

	# bias the ft when you start.
	ft_bias

	tick
	# set ob(savedatpid) [exec cat < /dev/rtf1 > /tmp/im.dat &]
	$w.f.b_run config -text pause -command [list b_pause_proc $w] -bg red
}

# b_pause_proc called when pause button is pressed

proc b_pause_proc {w} {
	global ob

	# puts "called pause"
	if {!$ob(running)} {
		puts "pause: already paused"
		return
	}
	# puts "pause: killing $ob(savedatpid)"

	# ticking will stop at next tick
	set ob(running) 0
	# exec kill $ob(savedatpid)
	# set ob(savedatpid) 0
	pause_loop
	$w.f.b_run config -text run -command [list b_run_proc $w] -bg green1
}

# tick reads data 10x/sec when robot code is loaded.

proc tick {} {
	global ob data

	set w .top
	set c $ob(vexw)

	# this will stop ticking if it returns.

	set ob(pos,x) [getptr x]
	set ob(pos,y) [getptr y]
	set ob(frc,x) [getfrc x]
	set ob(frc,y) [getfrc y]

        set ob(boxslot) [slot_to_bbox [list [rshm slot0_bcur_x] \
            [rshm slot0_bcur_y] [rshm slot0_bcur_w] [rshm slot0_bcur_h] ] ]

	# in the robot, +y is down, on the screen, +y is up,
	# so negate the y coords for graphic display, using y_up

	$c coords circlep [y_up [centxy $ob(pos,x) $ob(pos,y) .01]]
        $c coords boxslot [eval [list y_up $ob(boxslot)]]
        set x1 $ob(pos,x)
        set y1 $ob(pos,y)
        set x2 [expr {$ob(pos,x) + $ob(frc,x) / 100.}]
        set y2 [expr {$ob(pos,y) + $ob(frc,y) / 100.}]
        $c coords vecfrc [y_up $x1 $y1 $x2 $y2]

# note: the vecfrc arrow is read asynchronously from the crob control loop.
# occassionally, we read the forces after the slot controller computes them
# but before they are attenuated by pfo.  This might cause the force arrow
# to lengthen here, but it's not a problem in practice.
# if we decide that this is important, we can fix it with a copy variable

	$c scale kscale 0 0 $ob(scale) $ob(scale)
	$c scale vecfrc 0 0 $ob(scale) $ob(scale)

	after 100 tick
}

proc vex_exit {} {
	set w ".top.f"
	puts "vex exit: quitting..."
	$w.b_quit invoke
}

init

set w ".top.f"

wm protocol .top WM_DELETE_WINDOW vex_exit
wm protocol .vex WM_DELETE_WINDOW vex_exit

bind .top <Key-l> "$w.b_load invoke"
bind .top <Key-u> "$w.b_unload invoke"
bind .top <Key-r> "$w.b_run invoke"
bind .top <Key-p> "$w.b_pause invoke"
bind .top <Key-q> "$w.b_quit invoke"
bind .top <Escape> "$w.b_quit invoke"

bind .vex <Key-l> "$w.b_load invoke"
bind .vex <Key-u> "$w.b_unload invoke"
bind .vex <Key-r> "$w.b_run invoke"
bind .vex <Key-p> "$w.b_pause invoke"
bind .vex <Key-q> "$w.b_quit invoke"
bind .vex <Alt-c> "center_arm"
bind .vex <Alt-v> "center_print_proc"
bind .vex <Escape> "$w.b_quit invoke"
