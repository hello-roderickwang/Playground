#!/usr/bin/wish

# ft_test

# InMotion2 robot system software

# Copyright 2012 Interactive Motion Technologies, Inc.
# Watertown, MA, USA
# http://www.interactive-motion.com
# All rights reserved

# displays:

package require Tk

global ob

set ob(crobhome) $::env(CROB_HOME)

source $ob(crobhome)/shm.tcl

set ob(current_robot) [current_robot]

if {$ob(current_robot) != "planar"
    && $ob(current_robot) != "planarhand"
    && $ob(current_robot) != "planarwrist"} {
        tk_messageBox -title Failed -message "This robot is configured as a $ob(current_robot)\
and ft_test only works on planar."
        exit 1
}

set ob(color,pos) yellow
set ob(color,vel) darkgreen
set ob(color,mfrc) blue
set ob(color,dftf) brown
set ob(color,wftf) red

# this scales everything
# (scaling does not change line widths)
set ob(scale) 1000.0

set ob(dscale) [expr {$ob(scale) / 100.0}]


proc ft_test {w} {
	global ob

	# display canvas
	set c [canvas $w.c -height 600 -width 600]
	chwin $c [winfo width $c] [winfo height $c] 

	set linewidth 10

	# 1 screen pixel == 1 world mm

	# draw a red box for the safety zone
	$c create rect [centxy 0 0 .2] -outline red

	# draw a black box for the dots
	$c create rect [centxy 0 0 .14]

	# circles at compass points and center
	foreach i {-.14 0.0 .14} {
	foreach j {-.14 0.0 .14} {
		$c create oval [centxy $i $j .01] -fill gray
	}}

	# small links (zoomed out) and full scale links
	$c create line {0 0 0 0} \
		-tag "kscale slinks" -width 3 -fill gray -capstyle round
	$c create line {0 0 0 0} \
		-tag "kscale links" -width $linewidth -fill gray -capstyle round
	$c create oval {0 0 0 0} \
		-tag "motors" -fill gray -outline gray

	# these vectors are all created at (0,0)
	# when they move, the y coordinates will be flipped
	# with y_up, see "tick"

	# create point line, not really a vector.

	$c create line {0 0 0 0} \
		-tag "kscale vecvel" -width $linewidth -arrow last

	# create vectors, start them empty
	foreach i {dftf wftf dzftf wzftf mfrc} {
		$c create line {0 0 0 0} \
			-tag "dscale vec$i" -width $linewidth -arrow last
	}


	# put a dot on the end of links, with the dot on top.
	$c create oval [centxy 0 0 .01] \
		-tags "kscale circlep" -fill $ob(color,pos)

	$c create oval [centxy 0 .275 0] \
		-tags "kscale scirclep" -fill $ob(color,pos)

	$c itemconfigure vecvel -fill $ob(color,vel)
	$c itemconfigure vecmfrc -fill $ob(color,mfrc)
	$c itemconfigure vecdftf -fill $ob(color,dftf)
	$c itemconfigure vecwftf -fill $ob(color,wftf)
	$c itemconfigure vecdzftf -width 5 -fill $ob(color,dftf)
	$c itemconfigure vecwzftf -width 5 -fill $ob(color,wftf)

	$c scale all 0 0 $ob(scale) $ob(scale)
	$c scale dscale 0 0 .01 .01

	# handle resize
	bind $c <Configure> [list after idle chwin $c %w %h]

	return $c
}

# handle window resize
proc chwin {c w h} {
	set w2 [expr {$w / 2}]
	set h2 [expr {$h / 2}]
	set hx125 [expr {$h * 1.25}]
	# translate from 0,0 in upper left to 0,0 in center
	$c config -scrollregion [list -$w2 -$hx125 $w2 $h2]
}

proc scrollupdown {w amt} {
	global ob
	$ob(ft_testw) yview scroll $amt units
}

set ob(cwd) [pwd]
set ob(savedatpid) 0
set ob(loaded) 0
set ob(running) 0

# set up ft_test window

proc init {} {
	global data ob ft

	wm withdraw .

	toplevel .ft_test

	set w .ft_test

	# widget definitions

	# buttons across top in a frame

	set ::font "Helvetica 18"
	# d1,d2,d3 are dummy labels for empty lines.
	# this width dicates width for window.

	frame $w.f
	pack $w.f
	label $w.stat -textvariable ft(stat) -font $::font
	pack $w.stat

	foreach i {load run test quit} {
		button $w.f.b_${i} -text "$i" -command [list b_${i}_proc $w]
	}

	$w.f.b_quit config -bg red
	$w.f.b_test config -bg green1

	# widget placement

	pack $w.f.b_test $w.f.b_quit -side left

	# canvas
	set ob(ft_testw) [ft_test .ft_test]
	pack $ob(ft_testw)
	ft_status "Loading FT Test..."
	update idle
	b_load_proc $w
	b_run_proc $w
	ft_status "Centering arm..."
	center_proc
	ft_status "FT Test loaded."

}

# b_quit_proc called when quit button is pressed

proc b_quit_proc {w} {

	# puts "called quit"
	b_unload_proc $w
	after 1000 exit
}

# b_load_proc called when load button is pressed

proc b_load_proc {w} {
	global ob

	# puts "called load"
	if {$ob(loaded)} {
		puts "load: already loaded"
		return
	}
	set ob(loaded) 1
	if {![is_robot_cal_done]} {
		puts "This robot is not calibrated."
        tk_messageBox -title Failed -message "This robot is not calibrated."
		exit 1
	}
	wm protocol .ft_test WM_DELETE_WINDOW ft_test_exit
	start_lkm
	start_shm
	set ob(link_s) [rshm link_s]
	set ob(link_e) [rshm link_e]
	set ob(neg_off_y) [expr 0.0 - [rshm offset_y]]
	$ob(ft_testw) coords motors [centxy 0 -$ob(neg_off_y) .05]
	$ob(ft_testw) scale motors 0 0 $ob(scale) $ob(scale)
}

proc fail {str} {
    global ft
    # tk_messageBox -message $str
    ft_status $str
    puts "$str"
    set ft(failed) 1
}

proc read_ft {} {
    global ft
	set ft(x) [rshm x]
	set ft(y) [rshm y]
    foreach i {x y z} {
	set ft(world,$i) [rshm ft_${i}world]
    }
    for {set i 0} {$i < 6} {incr i} {
	set ft(raw,$i) [rshm ft_raw $i]
    }
    set ft(mfrc,x) [rshm x_force]
    set ft(mfrc,y) [rshm y_force]
}

proc ft_status {str} {
	global ft
	set ft(stat) $str
}

proc check_with_force {x y dir} {
    global ft ob
    set pslop 0.01
    set fslop 4.0
    # check center position
    puts "check $dir force FT (X,Y) ($ft(world,x), $ft(world,y))"
    if {(abs($ob(pos,x)) > $pslop) || (abs($ob(pos,y)) > $pslop)} {
	fail "handle was not in center for $dir pos ($ob(pos,x), $ob(pos,y))."
    }
    # compare sensed force with desired force
    if {abs($ft(world,x) - $ft(des,$dir,x)) > $fslop} {
	fail "$dir: X sense force failure, FT $ft(world,x), desired: $ft(des,$dir,x)"
    }
    if {abs($ft(world,y) - $ft(des,$dir,y)) > $fslop} {
	fail "$dir: Y sense force failure, FT $ft(world,y), desired: $ft(des,$dir,y)"
    }

    if {abs($ft(world,x) + $ft(mfrc,x)) > $fslop} {
	fail "$dir: X sense force failure, FT $ft(world,x), command force: $ft(mfrc,x)"
    }
    if {abs($ft(world,y) + $ft(mfrc,y)) > $fslop} {
	fail "$dir: Y sense force failure, FT $ft(world,y), command force: $ft(mfrc,y)"
    }
}

# test move - 2 seconds to apply force
# then read forces
# then 2 seconds to unapply force
proc ft_test_move {x y dir} {
	ft_status "Test $dir ${x}, ${y} +force..."
	movebox 0 0 {0 400 1} {0 0 0 0} {$x $y 0 0}
	tksleep 2000
	read_ft
	check_with_force $x $y $dir
	ft_status "Test $dir ${x}, ${y} -force..."
	movebox 0 0 {0 400 1} {$x $y 0 0} {0 0 0 0}
	tksleep 2000
}

proc b_test_proc {w} {
    global ft

    set stime [clock format [clock seconds]]
    puts "\n\nStart ft test\n$stime\n\n"

    set have_ft [rshm have_ft]
    # is the ft configured?
    set ft(failed) 0
    if {$have_ft <= 0} {
	puts "have_ft not configured in imt2.cal"
	tk_messageBox -message "have_ft not configured in imt2.cal"
    }

    tk_messageBox -message "Remove handle, do not touch, click ok."

    # test quiescent values
    ft_unbias
    read_ft
    for {set i 0} {$i < 6} {incr i} {
	set vslop 0.4
	puts "raw $i: $ft(raw,$i)"
	if {abs($ft(raw,$i)) > $vslop} {
	    fail "raw FT value $i ($ft(raw,$i)) out of range"
	}
    }
    ft_bias

    # test values under load
    tk_messageBox -message "Hold spindle at center, click ok, test will start in 5 seconds."
    ft_status "Test starting in 5 seconds..."
    tksleep 5000

    set ft(des,N,x) 0
    set ft(des,N,y) -14
    set ft(des,E,x) -14
    set ft(des,E,y) 0
    set ft(des,S,x) 0
    set ft(des,S,y) 14
    set ft(des,W,x) 14
    set ft(des,W,y) 0

    foreach {x y dir} {0.0 0.14 N 0.14 0.0 E 0.0 -0.14 S -0.14 0.0 W} {
	ft_test_move $x $y $dir
    }
    if {$ft(failed) > 0} {
	ft_status "Force transducer test FAILED"
	puts "Force transducer test FAILED"
    } else {
	ft_status "Force transducer test PASSED"
	puts "Force transducer test PASSED"
    }
}


proc center_proc {} {
	center_arm_2s
	tksleep 2000
}

proc center_print_proc {} {
	set x [rshm x]
	set y [rshm y]
	set fx [rshm ft_xworld]
	set fy [rshm ft_yworld]
	tk_messageBox -title "Force Report" -message "x: $x y $y\nfx $fx fy $fy"
}

# b_unload_proc called when unload button is pressed

proc b_unload_proc {w} {
	global ob

	# puts "called unload"

	if {!$ob(loaded)} {
		puts "load: already unloaded"
		return
	}

	b_pause_proc $w
	# pause pauses actuator output, stop stops all main loop i/o.
	stop_loop
	stop_shm
	stop_lkm
}

# b_run_proc called when run button is pressed

proc b_run_proc {w} {
	global ob

	# puts "called run"
	if {!$ob(loaded)} {
		puts "run: not yet loaded"
		return
	}
	if {$ob(running)} {
		puts "run: already running"
		return
	}
	set ob(running) 1
	wshm have_thermal_model 0
	after 100
	start_loop

	tick
	# set ob(savedatpid) [exec cat < /dev/rtf1 > /tmp/im.dat &]
}

# b_pause_proc called when pause button is pressed

proc b_pause_proc {w} {
	global ob

	# puts "called pause"
	if {!$ob(running)} {
		puts "pause: already paused"
		return
	}
	# puts "pause: killing $ob(savedatpid)"

	# ticking will stop at next tick
	set ob(running) 0
	# exec kill $ob(savedatpid)
	# set ob(savedatpid) 0
	pause_loop
}

# tick reads data 10x/sec when robot code is loaded.

proc tick {} {
	global ob data

	set c $ob(ft_testw)

	# this will stop ticking if it returns.
	if {!$ob(running)} {
		return
	}

	checkerror
	set ob(pos,x) [getptr x]
	set ob(pos,y) [getptr y]
	set ob(vel,x) [getvel x]
	set ob(vel,y) [getvel y]
	set ob(deg,s) [format %.3f [rshm shoulder_angle_degrees]]
	set ob(deg,e) [format %.3f [rshm elbow_angle_degrees]]
	set ob(rad,s) [rshm shoulder_angle_rad]
	set ob(rad,e) [rshm elbow_angle_rad]
	set ob(mfrc,x) [getfrc x]
	set ob(mfrc,y) [getfrc y]
	set ob(dftf,x) [getftfrc x]
	set ob(dftf,y) [getftfrc y]
	set ob(dftf,z) [getftfrc z]
	set ob(wftf,x) [getwftfrc x]
	set ob(wftf,y) [getwftfrc y]
	set ob(wftf,z) [getwftfrc z]
	set ob(mvolts,s) [getvolts s]
	set ob(mvolts,e) [getvolts e]
	set ob(velmag) [rshm velmag]
	set ob(ftmag) [rshm ft_xymag]

	# link lengths and y offset come from cal file
	set sx [expr {      cos($ob(rad,s)) * $ob(link_s)}]
	set sy [expr {$ob(neg_off_y) + sin($ob(rad,s)) * $ob(link_s)}]
	set ex [expr {$sx + cos($ob(rad,e)) * $ob(link_e)}]
	set ey [expr {$sy + sin($ob(rad,e)) * $ob(link_e)}]
	$c coords links [y_up 0 $ob(neg_off_y) $sx $sy $ex $ey]

	set sx [expr {       cos($ob(rad,s)) / 20. * $ob(link_s)}]
	set sy [expr {.275 + sin($ob(rad,s)) / 20. * $ob(link_s)}]
	set ex [expr { $sx + cos($ob(rad,e)) / 20. * $ob(link_e)}]
	set ey [expr { $sy + sin($ob(rad,e)) / 20. * $ob(link_e)}]
	$c coords slinks [y_up 0 .275 $sx $sy $ex $ey]
	$c coords scirclep [y_up [centxy $ex $ey .003]]

	# in the robot, +y is down, on the screen, +y is up,
	# so negate the y coords for graphic display, using y_up

	# $c coords linep [y_up 0 0 $ob(pos,x) $ob(pos,y)]
	$c coords circlep [y_up [centxy $ob(pos,x) $ob(pos,y) .01]]
	$c coords vecvel [y_up 0 0 $ob(vel,x) $ob(vel,y)]
	$c coords vecmfrc [y_up 0 0 $ob(mfrc,x) $ob(mfrc,y)]
	$c coords vecdftf [y_up 0 0 $ob(dftf,x) $ob(dftf,y)]
	$c coords vecdzftf [y_up 0 0 0 $ob(dftf,z)]
	$c coords vecwftf [y_up 0 0 $ob(wftf,x) $ob(wftf,y)]
	$c coords vecwzftf [y_up 0 0 0 $ob(wftf,z)]

	$c scale kscale 0 0 $ob(scale) $ob(scale)
	$c scale dscale 0 0 $ob(dscale) $ob(dscale)

	after 100 tick
}

proc ft_test_exit {} {
	set w .ft_test.f
	# puts "ft_test exit: quitting..."
	b_quit_proc $w
}

init
