#!/usr/bin/tclsh

# Copyright 2003-2013 Interactive Motion Technologies, Inc.
# Watertown, MA, USA
# http://www.interactive-motion.com
# All rights reserved

# plcal - calibrate planar robot with relative encoders

# with the latest jr3-equipped planar on a standard left-handed robot.
# (right-handed will be different!)

# method:
# using open loop control
# fold links to motors
# move folded links to left stop
# zero encoders
# query encoders
# move folded links to right stop
# query encoders
# compare queries and check for alignment.
# if the alignment is good, then we assume that the zero was good.
# if good, switch to closed loop control
# use controller to move links to 0,0 origin
# check that we're within 2 cm of 0,0

package require Tk

wm withdraw .

font create default -family Times -size 18
option add *font default

global ob

proc done {ret} {
    stop_loop
    stop_shm
    stop_lkm

    exit $ret
}

proc center_window { w } {
   set width [winfo reqwidth $w]
   set height [winfo reqheight $w]
   set x [expr { ( [winfo vrootwidth  $w] - $width  ) / 2 }]
   set y [expr { ( [winfo vrootheight $w] - $height ) / 2 }]

   # Hand the geometry off to the window manager

   wm geometry $w ${width}x${height}+${x}+${y}
}

proc pop {str} {
	if {![winfo exists .pop.lab]} {
		toplevel .pop
		# wm overrideredirect .pop 1
		wm transient .pop

		wm protocol .pop WM_DELETE_WINDOW [list done 1]
		wm title .pop ""
		label .pop.lab
		pack .pop.lab
	}

	.pop.lab config -text $str -padx 20 -pady 40 -font default
	wm deiconify .pop
	raise .pop
	update
	center_window .pop
	update
	tksleep 100
}

proc delpop {} {
	destroy .pop
}

proc tksleep {time} {
	after $time set ::tksleep_end 1
	vwait ::tksleep_end
}

# send raw voltages to both planar motors

proc plmot {{s 0.0} {e 0.0}} {
	global ob

	set s [expr {$s * $ob(voltsmult)}]
	set e [expr {$e * $ob(voltsmult)}]

	wshm raw_torque_volts_s $s
	wshm raw_torque_volts_e $e
}

# send raw voltage to hand motor

proc hamot {{h 0.0}} {
	global ob
	if {!$ob(have_hand)} {return}
	wshm hand_test_volts $h
}

# get radian encoder angles from both axes

proc gtheta {} {
	set ts [rshm stheta]
	set te [rshm etheta]
	return [list $ts $te]
}

# normalize an angle to between 0 and 2pi radians

proc radnorm {a} {
	set twopi [expr {atan(1) * 8.}]
	while {$a > $twopi} {
		set a [expr {$a - $twopi}]
	}
	while {$a < 0.0} {
		set a [expr {$a + $twopi}]
	}
	return $a
}

# print axis angles

proc prtheta {ts te} {
	puts "s $ts e $te"
}

proc checkcal {se rl srl rse hco} {
	global ob
	if {abs($srl - $ob(stopspan)) > $ob(slop) } {
		puts "arm stop span out of range: [format %5.2f $srl]"
		return 1
	}
	if {abs($rse - $ob(linkspan)) > $ob(slop)} {
		puts "arm link span out of range: [format %5.2f $rse]"
		return 1
	}
	if {abs($se) > ($ob(slop)/2.)} {
		puts "sediff [format %5.2f $se]"
		return 1
	}
	if {abs($rl) > ($ob(slop)/2.)} {
		puts "rldiff [format %5.2f $rl]"
		return 1
	}
	if {$ob(have_hand)} {
		puts "hand robot span: [format %5.3f $hco]"
		if {abs($hco - $ob(handspan)) > ($ob(handslop))} {
			puts "hand span out of range"
			return 1
		}
	}
	return 0
}

# main prog

# calculate differences:

# srl: rs and ls
# erl: re and le
# rse: rs and re
# lse: ls and le

set ob(crobhome) $::env(CROB_HOME)

source $ob(crobhome)/shm.tcl
set ob(current_robot) [current_robot]

if {![is_robot_ready]} {
	tk_messageBox -title Failed -message "The Ready lamp is not lit.\
Please release all Stop buttons,\
press the Start button, and try again."
	exit 1
}

pop "Loading Motor Configuration..."

if {[personality_is g2]} {
    # start CAN 
    # ob(naxes) contains the number of axes that responded to the CAN reset.
    set ob(detectednaxes) [exec $ob(crobhome)/tools/robsetup]

    if {$ob(detectednaxes) == 13} {
	tk_messageBox -title Failed -message "Not all axes are configured with a valid CAN ID."
	exit 1
    }

    if {$ob(detectednaxes) == 14} {
	tk_messageBox -title Failed -message "No axes were found."
	exit 1
    }

    if {$ob(detectednaxes) == 15} {
	tk_messageBox -title Failed -message "robsetup found an unrecognized robot type in current_robot."
	exit 1
    }

    if {$ob(detectednaxes) == 16} {
	tk_messageBox -title Failed -message "This robot is configured as a $ob(current_robot), but not enough axes were available."
	exit 1
    }

    if {$ob(detectednaxes) == 17} {
	tk_messageBox -title Failed -message "The Ready lamp is not lit.\
Please release all Stop buttons,\
press the Start button, and try again."
	exit 1
    }

    if {($ob(current_robot) == "planar"     && $ob(detectednaxes) < 2) || 
	($ob(current_robot) == "planarhand" && $ob(detectednaxes) < 3)    } {
	    tk_messageBox -title Failed -message "This robot is configured as a $ob(current_robot), but only $ob(detectednaxes) axes are available."
	    exit 1
    }

}


if {$ob(current_robot) != "planar" && $ob(current_robot) != "planarhand"} {
	tk_messageBox -title Failed -message "This robot is configured as a $ob(current_robot)\
and you are trying to calibrate it as a planar or planarhand."
	exit 1
}

# start the robot process, shared memory, and the control loop
# puts "loading robot process"
if {[is_lkm_loaded]} {
	puts "lkm already loaded, exiting."
	exit 1
} else {
	start_lkm
}
start_shm
pop "Calibration in Progress..."

# these are spans are over-written by the cal file.

# srl (and erl) should be near the actual span (1.55 radians)
set ob(stopspan) 1.55
# rse (and lse) should be near max locked open (2.56 radians)
set ob(linkspan) 2.56
# handspan is about 0.074-0.047 or 0.027 meters
set ob(handspan) 0.027

if {[personality_is g2]} {
    set ob(vbig) -1.0
    set ob(vsmall) -0.5
    set ob(vtiny) -0.2

    set ob(hsmall) -1.0
    set ob(hbig) -3.0
}

if {[personality_is ce]} {
    set ob(vbig) 1.0
    set ob(vsmall) 0.5
    set ob(vtiny) 0.2

    set ob(hsmall) 1.0
    set ob(hbig) 3.0
}

set ob(slop) 0.1
set ob(handslop) 0.005

# get values from the cal file, if they're set.
if {[rshm pl_stopspan] != 0.0} {
    set ob(stopspan) [rshm pl_stopspan]
    set ob(linkspan) [rshm pl_linkspan]
    set ob(handspan) [rshm hand_gear_span]

    set ob(vbig) [rshm pl_vbig]
    set ob(vsmall) [rshm pl_vsmall]
    set ob(vtiny) [rshm pl_vtiny]

    set ob(hsmall) [rshm ha_vsmall]
    set ob(hbig) [rshm ha_vbig]

    set ob(slop) [rshm pl_slop]
    set ob(handslop) [rshm ha_slop]
}

puts "desired arm robot spans:"
puts "arm stop span: [format %5.3f $ob(stopspan)]"
puts "arm link span: [format %5.3f $ob(linkspan)]"
puts "arm margin: [format %5.3f $ob(slop)]"
if {$ob(current_robot) == "planarhand"} {
    puts "hand span: [format %5.3f $ob(handspan)]"
    puts "hand margin: [format %5.3f $ob(handslop)]"
}

# start in open loop mode
wshm test_raw_torque 1
# no damping zone
wshm no_safety_check 1

# check that this is a planar, and whether it has a hand

set ob(have_planar) 0
set ob(have_planar) [rshm have_planar]
set ob(have_hand) 0
set ob(have_hand) [rshm have_hand]

# find out whether this is a 5 or 10 volt planar

set ob(pfovolts) 0.
set ob(voltsmult) 1.0
set ob(pfovolts) [rshm pfomax]
if {$ob(pfovolts) == 10.0} {set ob(voltsmult) 2.0}

start_loop

# sleep for 0.1 sec, gives robot chance to start
tksleep 100

# turn off cal bit, will only be turned on if the cal succeeds.
clear_robot_cal_done

# slow fold toward motors
plmot $ob(vtiny) $ob(vtiny)
hamot $ob(hsmall) 
tksleep 3000

# fold toward motors
plmot $ob(vsmall) $ob(vsmall)
tksleep 3000

# move folded toward left
plmot $ob(vsmall) $ob(vbig)
hamot $ob(hbig) 
tksleep 3000

# zero encoders
if {[personality_is g2]} {
    exec $ob(crobhome)/tools/canenc_zero
}
if {[personality_is ce]} {
    wshm pcienc_zero 1
}
tksleep 100
# the zero may cause "encoder kick" detection, so zero paused.
wshm paused 0

# repeat this, because it may have kicked and paused.
plmot $ob(vsmall) $ob(vbig)
hamot $ob(hbig) 
tksleep 1000

# read encoders
foreach {ls le} [gtheta] break
set hpos_closed [rshm hand_pos]

# move folded toward right
plmot $ob(vsmall) $ob(vtiny)
tksleep 2000
plmot $ob(vbig) $ob(vsmall)
hamot [expr {-1.0 * $ob(hsmall)}]
tksleep 4000

foreach {rs re} [gtheta] break
set hpos_open [rshm hand_pos]

# difference between right shoulder and elbow
set rsediff [radnorm [expr {$rs - $re}]]
# difference between left shoulder and elbow
set lsediff [radnorm [expr {$ls - $le}]]
# difference between those two
set sediff [expr {abs($rsediff - $lsediff)}]

# difference between right and left shoulder
set srldiff [radnorm [expr {$rs - $ls}]]
# difference between right and left elbow
set erldiff [radnorm [expr {$re - $le}]]
# difference between those two
set rldiff [expr {abs($srldiff - $erldiff)}]

set hcodiff 1.0
if {$ob(have_hand)} {
	set hcodiff [expr {abs($hpos_open - $hpos_closed)}]
}

set topdiff [expr {abs($srldiff - $ob(stopspan))}]
set leftdiff [expr {abs($lsediff - $ob(linkspan))}]
set rightdiff [expr {abs($rsediff - $ob(linkspan))}]
set botdiff [expr {abs($erldiff - $ob(stopspan))}]

puts ""
puts "actual arm robot spans:"
puts -nonewline [format "%5.2f %5.2f %5.2f" $ls $srldiff $rs]
puts [format "        %5.2f" $topdiff]
puts -nonewline [format "%5.2f       %5.2f" $lsediff $rsediff]
puts [format "  %5.2f       %5.2f" $leftdiff $rightdiff]
puts -nonewline [format "%5.2f %5.2f %5.2f" $le $erldiff $re]
puts [format "        %5.2f" $botdiff]
puts ""

set ret [checkcal $sediff $rldiff $srldiff $rsediff $hcodiff]

plmot 0 0
hamot 0
tksleep 100

# center on good cal

if {!$ret} {

	set x [rshm x]
	set y [rshm y]

	wshm test_raw_torque 0

	# max 2 volts in old sys, or 4 in new.
	set pfotv [expr {2.0 * $ob(voltsmult)}]
	wshm pfotest $pfotv

	tksleep 100

	puts "move to center"
	# planar
	movebox 0 0 {0 600 1} {$x $y 0.0 0.0} {0.0 0.0 0.0 0.0}
	tksleep 100
	# hand
	movebox 1 22 {0 200 1} {0.074 0 0 0} {0.060 0 0 0}
	tksleep 4000
	
	set finalx [rshm x]
	set finaly [rshm y]
	set finalhand [rshm hand_pos]

	delpop

        set finalok yes

        # check final arm position
	if {abs($finalx) > 0.02 || abs($finaly) > 0.02} {
            set finalok no
	    puts "Arm robot did not reach center position, x [format %6.3f $finalx] y [format %6.3f $finaly]"
	}

        # check final hand position
	if {$ob(current_robot) == "planarhand"} {
	    if {abs($finalhand) < 0.055 || abs($finalhand) > 0.065} {
		set finalok no
		puts "Hand robot did not reach center position, hand_pos [format %6.3f $finalhand]"
	    }
	}

	if { $finalok } {
	    # good cal, turn on cal bit
	    tk_messageBox -title Succeeded -message "Good Calibration"
	    set_robot_cal_done
	} else {
	    stop_loop
	    set ret 1
	    tk_messageBox -title Failed -message "Bad Calibration"
	}

} else {
	stop_loop
	delpop
	tk_messageBox -title Failed -message "Bad Calibration"

}

done $ret
