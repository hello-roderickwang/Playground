#!/usr/bin/tclsh

# Copyright 2003-2013 Interactive Motion Technologies, Inc.
# Watertown, MA, USA
# http://www.interactive-motion.com
# All rights reserved

# cewcenter - calibrate wrist robot with relative encoders

# method:
# using open loop control
# swing ps right-up, pull diff left-down
# set encoders to setpoints so that old zero is zero.
# query encoders
# move folded links to left-up stop
# query encoders
# compare queries and check for alignment.
# if the alignment is good, then we assume that the zero was good.
# if good, switch to closed loop control
# use controller to move links to 0,0 origin

package require Tk

set ob(crobhome) $::env(CROB_HOME)
source $ob(crobhome)/shm.tcl

wm withdraw .

font create default -family Times -size -18
option add *font default

global ob

proc done {{ret 0}} {
	stop_loop
	stop_shm
	stop_lkm

	exit $ret
}

proc center_window { w } {
   set width [winfo reqwidth $w]
   set height [winfo reqheight $w]
   set x [expr { ( [winfo vrootwidth  $w] - $width  ) / 2 }]
   set y [expr { ( [winfo vrootheight $w] - $height ) / 2 }]

   # Hand the geometry off to the window manager

   wm geometry $w ${width}x${height}+${x}+${y}
}

proc pop {str} {
	if {![winfo exists .pop.lab]} {
		toplevel .pop
		# wm overrideredirect .pop 1
		wm transient .pop

		wm protocol .pop WM_DELETE_WINDOW [list done 1]
		wm title .pop ""
		label .pop.lab
		pack .pop.lab
	}

	.pop.lab config -text $str -padx 20 -pady 40 -font default
	wm deiconify .pop
	raise .pop
	update
	center_window .pop
	update
	tksleep 100
}

proc delpop {} {
	destroy .pop
}

proc tksleep {time} {
	after $time set ::tksleep_end 1
	vwait ::tksleep_end
}

# send raw voltages to both motors

proc wrmot {{l 0.0} {r 0.0} {ps 0.0}} {
	global ob

	wshm wrist_right_test_volts $r
	wshm wrist_left_test_volts $l
	wshm wrist_ps_test_volts $ps
}

# get displacements for 3 motor axes

proc gmangles {} {
	set tr [rshm wrist_right_disp]
	set tl [rshm wrist_left_disp]
	set tps [rshm wrist_ps_disp]
	return [list $tr $tl $tps]
}

# normalize an angle to between 0 and 2pi radians

proc radnorm {a} {
	set twopi [expr {atan(1) * 8.}]
	while {$a > $twopi} {
		set a [expr {$a - $twopi}]
	}
	while {$a < 0.0} {
		set a [expr {$a + $twopi}]
	}
	return $a
}

# print axis angles

proc prtheta {ts te} {
	puts "s $ts e $te"
}

proc init_spans {} {
    global ob

    set ob(diffslop) 0.3
    set ob(psslop) 1.0
    set ob(rspan) 5.9
    set ob(lspan) 5.9
    set ob(psspan) 12.9

    if {[personality_is g2]} {
	set ob(diffslop) 0.3
	set ob(psslop) 1.0
	set ob(rspan) 5.9
	set ob(lspan) 5.9
	set ob(psspan) 12.9
	set ob(vsmall) 6.0
	set ob(vbig) 10.0

	if {[rshm wr_rspan] != 0.0} {
	    set ob(diffslop) [rshm wr_diffslop]
	    set ob(psslop) [rshm wr_psslop]
	    set ob(rspan) [rshm wr_rspan]
	    set ob(lspan) [rshm wr_lspan]
	    set ob(psspan) [rshm wr_psspan]
	    set ob(vbig) [rshm wr_vbig]
	    set ob(vssmall) [rshm wr_vsmall]
	}

    } else {
# actual radian span measures from ce wrist
# r -11.230887 -0.705478 10.525409
# l 0.358031 10.859357 10.501326
# ps -8.930376 8.893407 17.823783
	set ob(diffslop) 1.0
	set ob(psslop) 1.0
	set ob(rspan) 10.4
	set ob(lspan) 10.4
	set ob(psspan) 12.9

	set ob(vsmall) 7.0
	set ob(vbig) 10.0
    }
}

proc checkcal {r1 r2 l1 l2 ps1 ps2} {
	global ob
	set rdiff [expr {abs($r1 - $r2)}]
	set ldiff [expr {abs($l2 - $l1)}]
	set psdiff [expr {$ps2 - $ps1}]
	set rerr [expr {abs($rdiff - $ob(rspan))}]
	set lerr [expr {abs($ldiff - $ob(lspan))}]
	set pserr [expr {abs($psdiff - $ob(psspan))}]
	print_spans $r1 $r2 $l1 $l2 $ps1 $ps2 $rerr $lerr $pserr
	puts ""

	if {$rerr > $ob(diffslop) } {
		puts [format "right diff span out of range: %.3f error %.3f" $rdiff $rerr]
		return 1
	}
	if {$lerr > $ob(diffslop) } {
		puts [format "left diff span out of range: %.3f error %.3f" $ldiff $lerr]
		return 1
	}
	if {$pserr > $ob(psslop)} {
		puts [format "ps diff span out of range: %.3f error %.3f" $psdiff $pserr]
		return 1
	}
	return 0
}

proc print_spans {r1 r2 l1 l2 ps1 ps2 rerr lerr pserr} {
	puts "actual wrist robot spans:"
	puts [format "right motor left stop %.3f right stop %.3f span %.3f offset %.3f" $r1 $r2 [expr {abs($r2 - $r1)}] $rerr]
	puts [format "left motor left stop %.3f right stop %.3f span %.3f offset %.3f" $l1 $l2 [expr {abs($l2 - $l1)}] $lerr]
	puts [format "ps motor left stop %.3f right stop %.3f span %.3f offset %.3f" $ps1 $ps2 [expr {abs($ps2 - $ps1)}] $pserr]
}

# main prog

use_wrist

set ob(current_robot) [current_robot]

if {![is_robot_ready]} {
	tk_messageBox -title Failed -message "The Ready lamp is not lit.\
Please release all Stop buttons,\
press the Start button, and try again."
	exit 1
}

pop "Loading Motor Configuration..."

if {[personality_is g2]} {
    # start CAN 
    # ob(naxes) contains the number of axes that responded to the CAN reset.
    set ob(detectednaxes) [exec $ob(crobhome)/tools/robsetup]

    if {$ob(detectednaxes) == 13} {
	tk_messageBox -title Failed -message "Not all axes are configured with a valid CAN ID."
	exit 1
    }

    if {$ob(detectednaxes) == 14} {
	tk_messageBox -title Failed -message "No axes were found."
	exit 1
    }

    if {$ob(detectednaxes) == 15} {
	tk_messageBox -title Failed -message "robsetup found an unrecognized robot type in current_robot."
	exit 1
    }

    if {$ob(detectednaxes) == 16} {
	tk_messageBox -title Failed -message "This robot is configured as a $ob(current_robot), but not enough axes were available."
	exit 1
    }

    if {$ob(detectednaxes) == 17} {
	tk_messageBox -title Failed -message "The Ready lamp is not lit.\
Please release all Emergency Stops,\
press the Start button, and try again."
	exit 1
    }

    if {($ob(current_robot) == "wrist" && $ob(detectednaxes) < 3) } {
	    tk_messageBox -title Failed -message "This robot is configured as a $ob(current_robot), but only $ob(detectednaxes) axes are available."
	    exit 1
    }

}

if {$ob(current_robot) != "wrist"} {
	tk_messageBox -title Failed -message "This robot is configured as a $ob(current_robot)\
and you are trying to calibrate it as a wrist."
	exit 1
}

# start the robot process, shared memory, and the control loop
# puts "loading robot process"
if {[is_lkm_loaded]} {
	puts "lkm already loaded, exiting."
	exit 1
} else {
	##wm protocol . WM_DELETE_WINDOW done
	start_lkm
}
start_shm
pop "Calibration in Progress..."

# start in open loop mode
wshm test_raw_torque 1
# save gcomps for later
set dgcomp [rshm wrist_diff_gcomp]
set psgcomp [rshm wrist_ps_gcomp]
# no gravity compensation
wshm wrist_diff_gcomp 0.0
wshm wrist_ps_gcomp 0.0
# we're messing with the encoders, so don't check for odd behavior
wshm no_safety_check 1
# let me play with all the dofs
wshm wrist_nocenter3d 1

# in the games, the aa offset is 0.3, but for the cal, we assume
# that the stalk sticks straight out for zero.

wshm wrist_aa_offset 0.0

# default ps stiffness
wshm wrist_ps_stiff 5.0

# check that this is a wrist

set ob(have_wrist) 0
set ob(have_wrist) [rshm have_wrist]

if {$ob(have_wrist) == 0} {
	done 1
}

init_spans

start_loop

# sleep for .1 sec, gives robot chance to start
tksleep 100

# turn off cal bit, will only be turned on if the cal succeeds.
clear_robot_cal_done

# set counts
# if they are set in imt2.cal, keep them, else set them here.

if {[personality_is g2]} {
    set setct1 [rshm can_setct 1]
    set setct2 [rshm can_setct 2]
    set setct3 [rshm can_setct 3]
    set setct4 [rshm can_setct 4]
} else {
    # if CE
    set setct1 [rshm pcienc_setct 0]
    set setct2 [rshm pcienc_setct 1]
    set setct3 [rshm pcienc_setct 2]
    set setct4 [rshm pcienc_setct 3]
}

# on g2, we call canenc_zero
# on g1, enc happens in realtime loop, so wshm.
# in both cases, set pcienc_setct[0-3] to override
if {$setct1 == 0} {
    if {[personality_is g2]} {
        set setct1 3000
        set setct2 -40000
        set setct3 -41000
        set setct4 0
    } else {
        # 16704000 = 2^24 - -73216
        # 16719000 = 2^24 - -58216
        wshm pcienc_setct 2335 0
        wshm pcienc_setct 16704000 1
        wshm pcienc_setct 16735000 2
        wshm pcienc_setct 0 3
    }
}

if {[personality_is ce]} {
	# swing left to wind up
	wrmot 0 0 $ob(vsmall)
	tksleep 1000
}

# swing right ps up, open loop

wrmot -$ob(vsmall) 0.0 -$ob(vsmall)
tksleep 1000
wrmot -$ob(vbig) 0.0 -$ob(vbig)
tksleep 1000

# set encoders, but not to zero

if {[personality_is g2]} {
    set ret [exec $ob(crobhome)/tools/canenc_zero $setct1 $setct2 $setct3 $setct4]
} else {
    wshm pcienc_dosetct 1
}
tksleep 100

# read encoders
foreach {r1 l1 ps1} [gmangles] break

# swing left ps up, using closed loop
# note that we pull to points beyond the stops
# to get the "springs" to be very stiff

wshm test_raw_torque 0

# static
# differential
movebox 1 7 {0 1 0} {-1 -.9 0 0} {-1 -.9 0 0}
tksleep 20
# ps
movebox 0 12 {0 1 0} {-1 0 0 0} {-1 0 0 0}
tksleep 20

# now move
# differential
movebox 1 7 {0 600 1} {-1 -.9 0 0} {2 -2 0 0}
tksleep 20
# ps
movebox 0 12 {0 600 1} {-1 0 0 0} {2 0 0 0}
tksleep 3000

if {[personality_is ce]} {
	# finish ps
	movebox 0 12 {0 20 1} {1 0 0 0} {10 0 0 0}
	tksleep 200
}

# read encoders
foreach {r2 l2 ps2} [gmangles] break
tksleep 100

# print_spans $r1 $r2 $l1 $l2 $ps1 $ps2
puts "desired wrist robot spans:"
puts "right span [f3 $ob(rspan)]"
puts "left span [f3 $ob(lspan)]"
puts "ps span [f3 $ob(psspan)]"
puts "right and left margin [f3 $ob(diffslop)]"
puts "ps margin [f3 $ob(psslop)]"
puts ""

# check spans

set ret [checkcal $r1 $r2 $l1 $l2 $ps1 $ps2]

# do centering test if good so far.

if {!$ret} {
	# exit after 10 minutes
	after 600000 {wdone; done}

	# looser now, so it doesn't shake
	wshm wrist_ps_stiff 5.0
	wshm wrist_diff_stiff 2.0
	wshm wrist_diff_gcomp $dgcomp
	wshm wrist_ps_gcomp $psgcomp

	# good cal so far, do last centering check.
	wcenter

	tksleep 2500

	set fe_pos [rshm wrist_fe_pos]

	# if a diff motor fails, fe will be uncentered
	if {abs($fe_pos) > 0.1} {
		# fail
		puts [format "flexion/extension position out of range: %.3f" $fe_pos]
		set ret 1
	}
}

if {!$ret} {
	set_robot_cal_done

	delpop
	tk_messageBox -title Succeeded -message "Good Calibration"
	wdone
} else {
	# bad cal, stop motor forces now
	clear_robot_cal_done
	stop_loop
        delpop
        tk_messageBox -title Failed -message "Bad Calibration"
}

# puts "unloading robot process"

done
